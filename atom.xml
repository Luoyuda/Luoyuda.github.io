<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>落雨不落雨</title>
  
  <subtitle>角落</subtitle>
  <link href="https://luoyuda.github.io/atom.xml" rel="self"/>
  
  <link href="https://luoyuda.github.io/"/>
  <updated>2022-04-15T06:06:33.728Z</updated>
  <id>https://luoyuda.github.io/</id>
  
  <author>
    <name>xiayuchen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LFU 缓存算法 （JavaScript实现）</title>
    <link href="https://luoyuda.github.io/2022/04/15/data-structures/LFU/"/>
    <id>https://luoyuda.github.io/2022/04/15/data-structures/LFU/</id>
    <published>2022-04-15T13:23:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p><strong>最不经常使用算法（LFU）：</strong> 这个缓存算法使用一个计数器来记录条目被访问的频率。通过使用LFU缓存算法，最低访问数的条目首先被移除。这个方法并不经常使用，因为它无法对一个拥有最初高访问率之后长时间没有被访问的条目缓存负责。<a href="https://leetcode-cn.com/problems/lfu-cache/">leetcode真题地址</a></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><code>LFUCache(capacity)</code> - 用数据结构的容量 <code>capacity</code> 初始化对象</li><li><code>get(key)</code> - 如果键 <code>key</code> 存在于缓存中，则获取键的值，否则返回 -1 </li><li><code>put(key, value)</code> - 如果键 <code>key</code> 已存在，则变更其值；如果键不存在，请插入键值对。当缓存达到其容量 capacity 时，则应该在插入新项之前，移除最不经常使用的项。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，应该去除 最近最久未使用 的键。</li></ul><h2 id="流程拆解"><a href="#流程拆解" class="headerlink" title="流程拆解"></a>流程拆解</h2><p>我们需要 <code>map</code> 和双向链表的结构以达到 <code>get</code> 和 <code>put</code> 的时间复杂度为 <code>O(1)</code></p><ul><li><code>nodeMap</code>：用于存储节点信息</li><li><code>freqMap</code>：按使用频率存储双向链表结构，方便定位</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f520ccc7716408bb11b84b1c287469b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>当我们调用 <code>put(1,1)</code> 方法时是这样的，将其作为插入到 <code>key = 1</code> 双向链表中的第一个元素，然后更新 <code>minFreq</code> 为 1</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5cc051a2ece5417098735243e30cd30e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><code>put(2,2)</code>：将其作为插入到 <code>key = 1</code> 双向链表中的第一个元素，然后更新 <code>minFreq</code> 为 1</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09ace4cf56994eb9bfb4bdaa7c6dc3bc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><code>get(1)</code>：此时通过 <code>nodeMap</code> 中获取值，然后更新 <code>freqMap</code> 中的 <code>key = 2</code> 双向链表</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/881602da2c584756b35b253d68dbcf85~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><code>put(3,3)</code>：此时因为个数已经满了，需要删除最不经常使用的元素，通过 <code>minFreq</code> 去定位找到目标链表，并取出最后一个元素</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1a8836f1916453fb0a9da9f0aa4f6dd~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>将 <code>node-2</code> 删除后，将 <code>node-3</code> 插入，并更新 <code>minFreq</code> 为 1</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c33bb0a4ed5442c78b84969b9a564157~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">v</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">c</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; <span class="variable">l</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; <span class="variable">r</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ListNode</span>(<span class="params">k, v, c, l, r</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">k</span> = k</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">v</span> = v</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">c</span> = c || <span class="number">1</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">l</span> = l</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">r</span> = r</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向链表类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Linklist</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, <span class="string">&#x27;head&#x27;</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, <span class="string">&#x27;tail&#x27;</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">r</span> = <span class="variable language_">this</span>.<span class="property">tail</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">l</span> = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 往头部插入元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; <span class="variable">node</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Linklist</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> r = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">r</span></span><br><span class="line">  node.<span class="property">r</span> = r</span><br><span class="line">  node.<span class="property">l</span> = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">  r.<span class="property">l</span> = node</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">r</span> = node</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">length</span>++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除某个节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; <span class="variable">node</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Linklist</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">delete</span> = <span class="keyword">function</span> (<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">l</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> l = node.<span class="property">l</span></span><br><span class="line">    l.<span class="property">r</span> = node.<span class="property">r</span></span><br><span class="line">    node.<span class="property">r</span>.<span class="property">l</span> = l</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">length</span>--</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">capacity</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">LFUCache</span> = <span class="keyword">function</span> (<span class="params">capacity</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">capacity</span> = capacity</span><br><span class="line">  <span class="comment">// 当前最小的使用次数的链表位置</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">minFreq</span> = <span class="number">1</span></span><br><span class="line">  <span class="comment">// 存储节点</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nodeMap</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="comment">// 存储次数跟链表映射关系</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">freqMap</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">key</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">LFUCache</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">capacity</span> === <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">nodeMap</span>.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!node) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  <span class="comment">// 更新位置</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">update</span>(node)</span><br><span class="line">  <span class="keyword">return</span> node.<span class="property">v</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; <span class="variable">node</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">LFUCache</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">update</span> = <span class="keyword">function</span> (<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="comment">// 从旧链表中删除节点</span></span><br><span class="line">  <span class="keyword">let</span> last = <span class="variable language_">this</span>.<span class="property">freqMap</span>.<span class="title function_">get</span>(node.<span class="property">c</span>)</span><br><span class="line">  last.<span class="title function_">delete</span>(node)</span><br><span class="line">  <span class="keyword">if</span> (!last.<span class="property">length</span> &amp;&amp; node.<span class="property">c</span> === <span class="variable language_">this</span>.<span class="property">minFreq</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果链表为空，且当前次数是最低次数的链表值，最低次数的指针 + 1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">minFreq</span>++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从新链表头部插入</span></span><br><span class="line">  <span class="keyword">let</span> now = <span class="variable language_">this</span>.<span class="property">freqMap</span>.<span class="title function_">get</span>(++node.<span class="property">c</span>)</span><br><span class="line">  <span class="keyword">if</span> (!now) &#123;</span><br><span class="line">    now = <span class="keyword">new</span> <span class="title class_">Linklist</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">freqMap</span>.<span class="title function_">set</span>(node.<span class="property">c</span>, now)</span><br><span class="line">  &#125;</span><br><span class="line">  now.<span class="title function_">add</span>(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">key</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">LFUCache</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">put</span> = <span class="keyword">function</span> (<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">capacity</span> === <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">nodeMap</span>.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">    <span class="comment">// 不存在节点，创建</span></span><br><span class="line">    node = <span class="keyword">new</span> <span class="title class_">ListNode</span>(key, value)</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">freqMap</span>.<span class="title function_">get</span>(node.<span class="property">c</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">freqMap</span>.<span class="title function_">set</span>(node.<span class="property">c</span>, <span class="keyword">new</span> <span class="title class_">Linklist</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> nodes = <span class="variable language_">this</span>.<span class="property">freqMap</span>.<span class="title function_">get</span>(node.<span class="property">c</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">nodeMap</span>.<span class="property">size</span> &gt;= <span class="variable language_">this</span>.<span class="property">capacity</span>) &#123;</span><br><span class="line">      <span class="comment">// 个数超过时，从最低使用次数的链表中的尾部移除元素</span></span><br><span class="line">      <span class="keyword">let</span> minNodes = <span class="variable language_">this</span>.<span class="property">freqMap</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>.<span class="property">minFreq</span>)</span><br><span class="line">      <span class="keyword">let</span> minNode = minNodes.<span class="property">tail</span>.<span class="property">l</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">nodeMap</span>.<span class="title function_">delete</span>(minNode.<span class="property">k</span>)</span><br><span class="line">      minNodes.<span class="title function_">delete</span>(minNode)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 因为新增，必然使用此时最低，回归到1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">minFreq</span> = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nodeMap</span>.<span class="title function_">set</span>(key, node)</span><br><span class="line">    nodes.<span class="title function_">add</span>(node)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    node.<span class="property">v</span> = value</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">update</span>(node)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f16fef87554d44708e2acf622a500ddf~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>存在历史数据影响将来数据的”缓存污染”问题，累计的数据越多，对新加的数据可能起不到缓存的作用。比如历史记录中前 <code>9</code> 条数据都是 <code>100+</code> 的次数，后面新数据上来，使用次数赶不上历史数据时会优先被淘汰。</p><p>无法对一个拥有最初高访问率之后长时间没有被访问的条目缓存负责</p><p><a href="https://github.com/Luoyuda/js-demo/tree/master/data-structures/cache/LFU">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; title=&quot;是什么&quot;&gt;&lt;/a&gt;是什么&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;最不经常使用算法（LFU）：&lt;/strong&gt; 这个缓存算法使用一个计数器来记录条目被访问的频率。通过使用LFU缓存</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="数据结构" scheme="https://luoyuda.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="LFU" scheme="https://luoyuda.github.io/tags/LFU/"/>
    
  </entry>
  
  <entry>
    <title>LRU 缓存算法 （JavaScript实现）</title>
    <link href="https://luoyuda.github.io/2022/04/14/data-structures/LRU/"/>
    <id>https://luoyuda.github.io/2022/04/14/data-structures/LRU/</id>
    <published>2022-04-14T13:23:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p><code>LRU（Least Recently Used）</code>，即<strong>最近最少使用</strong>，是一种常用的页面置换算法，选择最近最久未使用的页面予以淘汰。该算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 t，当须淘汰一个页面时，选择现有页面中其 t 值最大的，即最近最少使用的页面予以淘汰。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><code>LRUCache(capacity)</code> 以正整数作为容量 <code>capacity</code> 初始化 <code>LRU</code> 缓存</li><li><code>get(key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li><li><code>put(key, value)</code> 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组<code>「关键字-值」</code>。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd64f76dca9f4866abd74423117c0940~tplv-k3u1fbpfcp-watermark.image" alt="GIF.gif"></p><p><a href="https://leetcode-cn.com/problems/OrIXps/">leetcode 习题</a> 用于验证</p><h2 id="array-hash-版本"><a href="#array-hash-版本" class="headerlink" title="array + hash 版本"></a>array + hash 版本</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">capacity</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">LRUCache</span> = <span class="keyword">function</span> (<span class="params">capacity</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">capacity</span> = capacity</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">keys</span> = []</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">values</span> = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">key</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">LRUCache</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">values</span>[key]</span><br><span class="line">  <span class="comment">// 如果不存在，返回 -1</span></span><br><span class="line">  <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  <span class="comment">// 更新 key 的位置</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">update</span>(key)</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">key</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">LRUCache</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">update</span> = <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">keys</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="variable language_">this</span>.<span class="property">keys</span>[i]) &#123;</span><br><span class="line">      <span class="comment">// 找到 key 的位置，把前面的元素往后移动一位</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">keys</span>[j] = <span class="variable language_">this</span>.<span class="property">keys</span>[j - <span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将 key 移动到首位</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">keys</span>[<span class="number">0</span>] = key</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">key</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">LRUCache</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">put</span> = <span class="keyword">function</span> (<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> val = <span class="variable language_">this</span>.<span class="property">values</span>[key]</span><br><span class="line">  <span class="comment">// 更新值</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">values</span>[key] = value</span><br><span class="line">  <span class="keyword">if</span> (val !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果之前存在值，更新位置</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">update</span>(key)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 超出先删除</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">keys</span>.<span class="property">length</span> &gt;= <span class="variable language_">this</span>.<span class="property">capacity</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">values</span>[<span class="variable language_">this</span>.<span class="property">keys</span>.<span class="title function_">pop</span>()]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 往第一个位置插入</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">keys</span>.<span class="title function_">unshift</span>(key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03b1cad336bc4dc09e2c086b22caf894~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>虽然通过，但是效率并不高</p><h2 id="采用双向链表优化"><a href="#采用双向链表优化" class="headerlink" title="采用双向链表优化"></a>采用双向链表优化</h2><h3 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10fc81f64f0f44f38ce9dea72444249a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09be8bbf192147dfb5804f37c25169f6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88e0fde9f6ab41feb7b5b1d950205619~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/36f258d4fcbb4be1959c16f262b3dfbc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">v</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; <span class="variable">l</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; <span class="variable">r</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Node</span>(<span class="params">k, v, l, r</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">l</span> = l</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">r</span> = r</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">k</span> = k</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">v</span> = v</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">capacity</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">LRUCache</span> = <span class="keyword">function</span> (<span class="params">capacity</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span> = capacity</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">map</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(-<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(-<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">r</span> = <span class="variable language_">this</span>.<span class="property">tail</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">l</span> = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">key</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">LRUCache</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!node) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">update</span>(node)</span><br><span class="line">  <span class="keyword">return</span> node.<span class="property">v</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; <span class="variable">node</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">LRUCache</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">update</span> = <span class="keyword">function</span> (<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="comment">// 先从链表中提取出来</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">delete</span>(node)</span><br><span class="line">  <span class="comment">// 在头节点位置插入</span></span><br><span class="line">  node.<span class="property">r</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">r</span></span><br><span class="line">  node.<span class="property">l</span> = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">r</span>.<span class="property">l</span> = node</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">r</span> = node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; <span class="variable">key</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">LRUCache</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">delete</span> = <span class="keyword">function</span> (<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">l</span>) &#123;</span><br><span class="line">    <span class="comment">// 断开节点 1 -&gt; 2 -&gt; 3</span></span><br><span class="line">    <span class="comment">// 1 -&gt; 3</span></span><br><span class="line">    <span class="keyword">let</span> l = node.<span class="property">l</span></span><br><span class="line">    l.<span class="property">r</span> = node.<span class="property">r</span></span><br><span class="line">    node.<span class="property">r</span>.<span class="property">l</span> = l</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">key</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">LRUCache</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">put</span> = <span class="keyword">function</span> (<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">get</span>(key) || <span class="keyword">new</span> <span class="title class_">Node</span>(key, value)</span><br><span class="line">  <span class="comment">// 更新节点</span></span><br><span class="line">  node.<span class="property">v</span> = value</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">set</span>(key, node)</span><br><span class="line">  <span class="comment">// 更新位置</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">update</span>(node)</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">map</span>.<span class="property">size</span> &gt; <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">    <span class="comment">// 删除队尾元素</span></span><br><span class="line">    <span class="keyword">let</span> del = <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">l</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">delete</span>(del.<span class="property">k</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">delete</span>(del)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45e8ff4909a440fdbe66e0c30ca577ea~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><a href="https://github.com/Luoyuda/js-demo/tree/master/data-structures/cache/LRU">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; title=&quot;是什么&quot;&gt;&lt;/a&gt;是什么&lt;/h2&gt;&lt;p&gt;&lt;code&gt;LRU（Least Recently Used）&lt;/code&gt;，即&lt;strong&gt;最近最少使用&lt;/strong&gt;，是一种</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="数据结构" scheme="https://luoyuda.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="LRU" scheme="https://luoyuda.github.io/tags/LRU/"/>
    
  </entry>
  
  <entry>
    <title>开发一个懒加载图片 npm 插件</title>
    <link href="https://luoyuda.github.io/2022/04/12/JavaScript/lazy/"/>
    <id>https://luoyuda.github.io/2022/04/12/JavaScript/lazy/</id>
    <published>2022-04-12T02:35:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="懒加载图片"><a href="#懒加载图片" class="headerlink" title="懒加载图片"></a>懒加载图片</h2><p>懒加载图片是 <code>web</code> 中常见的性能优化手段，可以有效的减少非首屏的图片请求，带宽消耗</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><ol><li><code>img</code> 元素定义一个 <code>data-src</code> 属性存放图片地址或者普通元素定义一个 <code>data-background-src</code> 属性</li><li>获取屏幕可视区域的尺寸</li><li>获取元素到窗口边缘的距离</li><li>判断元素是否在可视边缘内，如果是则把 <code>data-src</code> 赋值给 <code>src</code> 或者 <code>data-background-src</code> 赋值给 <code>background-image: url()</code></li></ol><h2 id="使用的-API"><a href="#使用的-API" class="headerlink" title="使用的 API"></a>使用的 API</h2><p><code>IntersectionObserver</code>：提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(viewport)交叉状态的方法，具体使用参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver">mdn</a></p><p><code>scroll</code>：监听滚动事件，判断目标元素是否在视窗内</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>目录结构</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d40d7048d304c1ead1d68f256b9405f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol><li>先写一个页面</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>lazy<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">min-height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.bg</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.data</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: scroll;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#data</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">10000px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> app = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> data = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;data&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> src = <span class="string">&#x27;https://p9-passport.byteacctimg.com/img/user-avatar/fbf0dad2f64546b5718cb7e502e92c7b~1000x1000.image&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> lazyHtml = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">20</span>).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> prev + <span class="string">`&lt;img class=&#x27;img&#x27; index=<span class="subst">$&#123;index&#125;</span> data-src=&#x27;<span class="subst">$&#123;src&#125;</span>?index=<span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>() + index&#125;</span>&#x27;&gt;`</span></span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> lazyBackgroundHtml = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">20</span>).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> prev + <span class="string">`&lt;div class=&#x27;bg&#x27; index=<span class="subst">$&#123;index&#125;</span> style=&#x27;background-position: center&#x27; data-background-image=&#x27;<span class="subst">$&#123;src&#125;</span>?index=<span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>() + index&#125;</span>&#x27;&gt;&lt;/div&gt;`</span></span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      app.<span class="property">innerHTML</span> = lazyHtml + lazyBackgroundHtml</span></span><br><span class="line"><span class="language-javascript">      data.<span class="property">innerHTML</span> = lazyHtml + lazyBackgroundHtml</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2aad4a1256a64b0fb855011570e70910~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="2"><li>先写如何调用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 确保节点插入后使用懒加载工具</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">lazyImage</span> = <span class="title class_">LazyImage</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;.data&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">lazyImage</span> = <span class="title class_">LazyImage</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>开始来写 <code>LazyImage</code> 的实现，先把代码骨架写好</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lazy</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LazyImage</span>(<span class="params">...arg</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Lazy</span>(...arg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>构造函数中需要去对参数进行提取合并，初始化操作</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line">  <span class="comment">// 从哪个元素下获取节点</span></span><br><span class="line">  <span class="keyword">const</span> el = options.<span class="property">el</span> || <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">el</span> = util.<span class="title function_">querySelector</span>(el)</span><br><span class="line">  <span class="comment">// 懒加载 N 秒后执行</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">wait</span> = options.<span class="property">wait</span> || <span class="number">500</span></span><br><span class="line">  <span class="comment">// 偏移量</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">diffTop</span> = <span class="number">0</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">diffLeft</span> = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 容器，是否父容器为滚动元素，相对父容器还是window</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isScrollContainer</span> =</span><br><span class="line">    options.<span class="property">isScrollContainer</span> ||</span><br><span class="line">    !(<span class="variable language_">this</span>.<span class="property">el</span>.<span class="property">scrollWidth</span> &lt;= <span class="variable language_">this</span>.<span class="property">el</span>.<span class="property">clientWidth</span>) ||</span><br><span class="line">    !(<span class="variable language_">this</span>.<span class="property">el</span>.<span class="property">scrollHeight</span> &lt;= <span class="variable language_">this</span>.<span class="property">el</span>.<span class="property">clientHeight</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">container</span> = <span class="variable language_">this</span>.<span class="property">isScrollContainer</span> ? <span class="variable language_">this</span>.<span class="property">el</span> : <span class="variable language_">window</span></span><br><span class="line">  <span class="comment">// 合并 observerOption IntersectionObserver 使用的配置</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">observerOption</span> = options.<span class="property">observerOption</span> || &#123;</span><br><span class="line">    <span class="attr">thresholds</span>: [<span class="number">1</span>],</span><br><span class="line">    <span class="attr">root</span>: <span class="variable language_">this</span>.<span class="property">isScrollContainer</span> ? <span class="variable language_">this</span>.<span class="property">el</span> : <span class="literal">null</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 待观察图片数组</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">images</span> = []</span><br><span class="line">  <span class="comment">// 初始化监听方式，使用单例模式</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">initEvents</span> = <span class="title function_">getEventFunc</span>().<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="comment">// 初始化销毁函数，避免报错，先使用空函数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">destroyEvent</span> = <span class="function">() =&gt;</span> &#123; &#125;</span><br><span class="line">  <span class="comment">// 更新插件</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">update</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>getEventFunc</code> 的实现</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="literal">null</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEventFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 如果已经判断过，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (func) <span class="keyword">return</span> func</span><br><span class="line">  <span class="comment">// 优先使用 IntersectionObserver</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">IntersectionObserver</span>) &#123;</span><br><span class="line">    func = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 这里使用缓存数组，缓存激活元素</span></span><br><span class="line">      <span class="keyword">let</span> activeImages = []</span><br><span class="line">      <span class="comment">// 使用 setTimeout 做一个防抖</span></span><br><span class="line">      <span class="keyword">let</span> timeout</span><br><span class="line">      <span class="comment">// 监听</span></span><br><span class="line">      <span class="keyword">let</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">images</span>) =&gt;</span> &#123;</span><br><span class="line">        activeImages.<span class="title function_">push</span>(...images)</span><br><span class="line">        <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          activeImages</span><br><span class="line">            .<span class="title function_">filter</span>(<span class="function">(<span class="params">image</span>) =&gt;</span> image.<span class="property">isIntersecting</span>)</span><br><span class="line">            .<span class="title function_">map</span>(<span class="function">(<span class="params">image</span>) =&gt;</span> image.<span class="property">target</span>)</span><br><span class="line">            .<span class="title function_">forEach</span>(<span class="function">(<span class="params">image</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">initImages</span>(image)) &#123;</span><br><span class="line">                <span class="comment">// 完成图片加载后移除监听</span></span><br><span class="line">                observer.<span class="title function_">unobserve</span>(image)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          <span class="comment">// 清空本次激活数组</span></span><br><span class="line">          activeImages = []</span><br><span class="line">        &#125;, <span class="variable language_">this</span>.<span class="property">wait</span>)</span><br><span class="line">      &#125;, <span class="variable language_">this</span>.<span class="property">observerOption</span>)</span><br><span class="line">      <span class="comment">// 对每一项进行监听</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">images</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">image</span>) =&gt;</span> observer.<span class="title function_">observe</span>(image))</span><br><span class="line">      <span class="comment">// 返回一个销毁事件监听方法</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">images</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">image</span>) =&gt;</span> observer.<span class="title function_">unobserve</span>(image))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则降级使用 scroll</span></span><br><span class="line">    func = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 这里也做一个防抖</span></span><br><span class="line">      <span class="keyword">let</span> timeout = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">let</span> <span class="title function_">load</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">images</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">image</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">initImages</span>(image))</span><br><span class="line">        &#125;, <span class="variable language_">this</span>.<span class="property">wait</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">container</span> !== <span class="variable language_">window</span>) &#123;</span><br><span class="line">        <span class="comment">// fix 横向滚动时上下滚动无法触发更新问题</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, load)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, load)</span><br><span class="line">      <span class="comment">// 同样返回一个销毁函数</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, load)</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, load)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> func</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><code>update</code> 和 <code>_init</code> 方法实现</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">_init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 先销毁</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">destroyEvent</span>()</span><br><span class="line">  <span class="comment">// 获取元素</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">queryImage</span>()</span><br><span class="line">  <span class="comment">// 监听，并到下一次销毁的方法</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">destroyEvent</span> = <span class="variable language_">this</span>.<span class="title function_">initEvents</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_init</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>编写工具方法 <code>util</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = &#123;</span><br><span class="line">  <span class="comment">// 获取容器宽高</span></span><br><span class="line">  <span class="title function_">getVwVh</span>(<span class="params">container</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">vw</span>:</span><br><span class="line">        container.<span class="property">innerWidth</span> ||</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">innerWidth</span> ||</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>,</span><br><span class="line">      <span class="attr">vh</span>:</span><br><span class="line">        container.<span class="property">innerHeight</span> ||</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">innerHeight</span> ||</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取元素</span></span><br><span class="line">  <span class="title function_">querySelector</span>(<span class="params">el = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> el ? <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el) : <span class="variable language_">document</span>.<span class="property">body</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取元素属性值</span></span><br><span class="line">  <span class="title function_">getAttribute</span>(<span class="params">el, name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> el.<span class="title function_">getAttribute</span>(name)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取全部元素</span></span><br><span class="line">  <span class="title function_">querySelectorAll</span>(<span class="params">el, search</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> el &amp;&amp; search ? el.<span class="title function_">querySelectorAll</span>(search) : []</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化工具函数</span></span><br><span class="line">;[</span><br><span class="line">  [<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;getSrc&#x27;</span>, util.<span class="property">getAttribute</span>],</span><br><span class="line">  [<span class="string">&#x27;data-src&#x27;</span>, <span class="string">&#x27;getDataSrc&#x27;</span>, util.<span class="property">getAttribute</span>],</span><br><span class="line">  [<span class="string">&#x27;data-background-image&#x27;</span>, <span class="string">&#x27;getBackgroundSrc&#x27;</span>, util.<span class="property">getAttribute</span>],</span><br><span class="line">  [<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;getStyle&#x27;</span>, util.<span class="property">getAttribute</span>],</span><br><span class="line">  [<span class="string">&#x27;[data-src]&#x27;</span>, <span class="string">&#x27;queryAllSrc&#x27;</span>, util.<span class="property">querySelectorAll</span>],</span><br><span class="line">  [<span class="string">&#x27;[data-background-image]&#x27;</span>, <span class="string">&#x27;queryAllImage&#x27;</span>, util.<span class="property">querySelectorAll</span>],</span><br><span class="line">].<span class="title function_">forEach</span>(<span class="function">(<span class="params">[key, val, fn]</span>) =&gt;</span> &#123;</span><br><span class="line">  util[val] = <span class="function">(<span class="params">el</span>) =&gt;</span> <span class="title function_">fn</span>(el, key)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="9"><li><code>queryImage</code> 方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">queryImage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">el</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 获取所有符合标准的元素</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">images</span> = [</span><br><span class="line">    ...util.<span class="title function_">queryAllSrc</span>(<span class="variable language_">this</span>.<span class="property">el</span>),</span><br><span class="line">    ...util.<span class="title function_">queryAllImage</span>(<span class="variable language_">this</span>.<span class="property">el</span>),</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 过滤漏网之鱼</span></span><br><span class="line">    <span class="keyword">return</span> !!(</span><br><span class="line">      !util.<span class="title function_">getSrc</span>(el) &amp;&amp;</span><br><span class="line">      (util.<span class="title function_">getDataSrc</span>(el) || util.<span class="title function_">getBackgroundSrc</span>(el))</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li><code>inViewport</code> 判断是否处于视窗内</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">inViewport</span>(<span class="params">el</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取容器宽高</span></span><br><span class="line">  <span class="keyword">const</span> &#123; vw, vh &#125; = util.<span class="title function_">getVwVh</span>(<span class="variable language_">this</span>.<span class="property">container</span>)</span><br><span class="line">  <span class="comment">// 获取元素的位置</span></span><br><span class="line">  <span class="keyword">const</span> &#123; top, right, bottom, left &#125; = el.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line">  <span class="comment">// 计算判断是否满足条件</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    top - vh &lt; <span class="variable language_">this</span>.<span class="property">diffTop</span> &amp;&amp;</span><br><span class="line">    bottom &gt; <span class="variable language_">this</span>.<span class="property">diffTop</span> &amp;&amp;</span><br><span class="line">    left - vw &lt; <span class="variable language_">this</span>.<span class="property">diffLeft</span> &amp;&amp;</span><br><span class="line">    right &gt; <span class="variable language_">this</span>.<span class="property">diffLeft</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li><code>initImages</code> 加载图片方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">initImages</span>(<span class="params">image</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果不在视窗内，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">inViewport</span>(image)) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="comment">// 获取内容</span></span><br><span class="line">  <span class="keyword">const</span> src = util.<span class="title function_">getSrc</span>(image)</span><br><span class="line">  <span class="keyword">const</span> dataSrc = util.<span class="title function_">getDataSrc</span>(image)</span><br><span class="line">  <span class="keyword">const</span> dataBackground = util.<span class="title function_">getBackgroundSrc</span>(image)</span><br><span class="line">  <span class="comment">// 判断是否加载过</span></span><br><span class="line">  <span class="keyword">if</span> (src || (!dataSrc &amp;&amp; !dataBackground)) <span class="keyword">return</span> image</span><br><span class="line">  <span class="comment">// 存在src</span></span><br><span class="line">  <span class="keyword">if</span> (dataSrc) &#123;</span><br><span class="line">    <span class="comment">// 修改src</span></span><br><span class="line">    image.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, dataSrc)</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">load</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 初始化结束后从数组中清除该节点</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">images</span> = <span class="variable language_">this</span>.<span class="property">images</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">img</span>) =&gt;</span> img !== image)</span><br><span class="line">      image.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>)</span><br><span class="line">      <span class="comment">// 删除事件监听</span></span><br><span class="line">      image.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;load&#x27;</span>, load)</span><br><span class="line">    &#125;</span><br><span class="line">    image.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, load)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (dataBackground) &#123;</span><br><span class="line">    <span class="comment">// 获取原有的 style 进行拼接</span></span><br><span class="line">    image.<span class="property">style</span> = <span class="string">`<span class="subst">$&#123;util.getStyle(</span></span></span><br><span class="line"><span class="subst"><span class="string">      image</span></span></span><br><span class="line"><span class="subst"><span class="string">    )&#125;</span>; background-image:url(<span class="subst">$&#123;dataBackground&#125;</span>);`</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">images</span> = <span class="variable language_">this</span>.<span class="property">images</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">img</span>) =&gt;</span> img !== image)</span><br><span class="line">    image.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;data-background-image&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> image</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="12"><li>看看效果</li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f47f8297e0f24f368a38f516dca48569~tplv-k3u1fbpfcp-watermark.image" alt="GIF.gif"></p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><ol><li>使用 <code>rollup</code> 打包</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">&quot;rollup-plugin-babel&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-node-resolve&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-commonjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; terser &#125; <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-terser&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;LazyImage&#x27;</span>,</span><br><span class="line">    <span class="attr">file</span>: <span class="string">&#x27;xy-lazyimage.min.js&#x27;</span>,</span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">resolve</span>(),</span><br><span class="line">    <span class="title function_">commonjs</span>(),</span><br><span class="line">    <span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&#x27;node_modules/**&#x27;</span>, <span class="comment">// 防止打包node_modules下的文件</span></span><br><span class="line">      <span class="attr">runtimeHelpers</span>: <span class="literal">true</span>,       <span class="comment">// 使plugin-transform-runtime生效</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">terser</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>package.json</code></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xy-lazyimage&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;懒加载图片插件&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xy-lazyimage.min.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -c&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/Luoyuda/xy-lazyimage&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xiayuchen&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-babel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.17.8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/plugin-transform-runtime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.17.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/polyfill&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.12.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.16.11&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;core-js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.21.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-commonjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-node-resolve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-terser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;lazy&quot;</span><span class="punctuation">,</span> <span class="string">&quot;lazy image&quot;</span><span class="punctuation">,</span> <span class="string">&quot;lazyload&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;xy-lazyimage.min.js&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94ceab1b22df438aa11a4c4c39e5cc86~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aedb2a455be8468083f48d428447ee68~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><a href="https://github.com/Luoyuda/xy-lazyimage">源码地址</a></p><p><a href="https://www.npmjs.com/package/xy-lazyimage">npm包地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;懒加载图片&quot;&gt;&lt;a href=&quot;#懒加载图片&quot; class=&quot;headerlink&quot; title=&quot;懒加载图片&quot;&gt;&lt;/a&gt;懒加载图片&lt;/h2&gt;&lt;p&gt;懒加载图片是 &lt;code&gt;web&lt;/code&gt; 中常见的性能优化手段，可以有效的减少非首屏的图片请求，带宽消耗&lt;/p</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="懒加载图片" scheme="https://luoyuda.github.io/tags/%E6%87%92%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87/"/>
    
    <category term="插件开发" scheme="https://luoyuda.github.io/tags/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="性能优化" scheme="https://luoyuda.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>EventLoop 到底是个啥（JavaScript）</title>
    <link href="https://luoyuda.github.io/2022/04/11/JavaScript/eventloop/"/>
    <id>https://luoyuda.github.io/2022/04/11/JavaScript/eventloop/</id>
    <published>2022-04-11T08:35:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c301abed6964afcbb256244ac481da0~tplv-k3u1fbpfcp-watermark.image" alt="微信截图_20220411115823.png"></p><h2 id="同步和异步、阻塞和非阻塞"><a href="#同步和异步、阻塞和非阻塞" class="headerlink" title="同步和异步、阻塞和非阻塞"></a>同步和异步、阻塞和非阻塞</h2><p>同步和异步关注的是<strong>消息通信机制</strong>，描述的是一种<strong>行为方式</strong></p><ul><li>同步：发出调用后，在没有得到结果之前，该调用不返回。当调用返回时得到返回值。调用者主动等待这个调用结果</li><li>异步：发出调用后，立即返回。但调用方通常不会立即得到结果。调用者需要等待被调用者通知才能得到调用结果</li></ul><p>阻塞非阻塞关注的是<strong>程序在等待调用结果时的状态</strong>，描述的是一种<strong>状态</strong></p><ul><li>阻塞：调用结果返回之前，线程被挂起，只有得到结果之后才会激活</li><li>非阻塞：调用后不等待结果，该调用不阻塞当前进程</li></ul><h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><p><code>JavaScript</code> 是一门单线程的语言，起初只是为了实现简单的功能而设计的脚本语言。单线程存在着任务执行阻塞的问题，遇到耗时的操作时，容易导致页面长时间无响应。</p><p><code>EventLoop</code>（事件循环）是让 <code>JavaScript</code> 做到即是单线程运行，又不会阻塞的一种机制。是 <code>JavaScript</code> 并发模型的基础，用于协调各类事件、交互、脚本执行、UI渲染、网络请求等操作</p><p><code>EventLoop</code> 由三个部分组成，<strong>函数调用栈、宏任务队列（macro-task-queue）和微任务队列（micro-task-queue）</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b8514d79c7d45a6a4496816bab179b0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h4><p>当引擎遇到 <code>JS</code> 代码时，会产生全局上下文，并将其压入调用栈中，后面每当遇到函数调用都会往栈中压入新的函数上下文，执行完栈顶内容后，弹出对应的上下文</p><h4 id="宏任务队列"><a href="#宏任务队列" class="headerlink" title="宏任务队列"></a>宏任务队列</h4><p>通过队列存放被注册的宏任务</p><ul><li>常见的宏任务（MacroTask）：<code>script</code> 中的代码、<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate(ie10、node)</code>、<code>postMessage(MessageChannel)</code>、<code>I/O</code>、<code>UI渲染</code>、<code>网络请求</code>、<code>History API</code></li><li><code>requestAnimationFrame</code>不是宏任务！它会在微任务结束后，下一个 <code>EventLoop</code> 开始前去执行</li></ul><h4 id="微任务队列"><a href="#微任务队列" class="headerlink" title="微任务队列"></a>微任务队列</h4><p>通过队列存放被注册的微任务</p><ul><li>常见的微任务（MicroTask）：<code>Promise callback</code>、<code>MutationObserver</code>、<code>Object.observe</code></li></ul><h3 id="循环过程"><a href="#循环过程" class="headerlink" title="循环过程"></a>循环过程</h3><p><strong>一个宏任务一队微任务</strong></p><ol><li>调用栈选择最先进入队列的 <code>MacroTask</code>，执行过程如果产生新的 <code>MacroTask</code> 或 <code>MicroTask</code> 分别入队</li><li>执行完毕第一个 <code>MacroTask</code>，检查当前的 <code>MicroTask</code> 队列，执行至清空 <code>MicroTaskQueue</code></li><li>浏览器检查更新渲染（<code>render</code>），每次循环都可能会检查更新渲染</li><li>重复 1-3，直到所有队列都为空</li></ol><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffd71bdf316e4f258d110c955adb80f2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> logs = []</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">log</span> = (<span class="params">v</span>) =&gt; logs.<span class="title function_">push</span>(v)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(<span class="string">&#x27;timer - 1&#x27;</span>)</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;sync - 1&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;then - 1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(<span class="string">&#x27;sync - 2&#x27;</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;timer - 2&#x27;</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">log</span>(<span class="string">&#x27;sync - 3&#x27;</span>)</span><br><span class="line">      <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">log</span>(<span class="string">&#x27;then - 3&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(<span class="string">&#x27;then - 2&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li><p>遇到 <code>setTimeout</code> 将回调入队 <code>macro-task-queue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(<span class="string">&#x27;timer - 1&#x27;</span>)</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;sync - 1&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;then - 1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0aa4c427665c4bc3bb0033a9a0bbad9b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li><li><p>接着执行 <code>new Promise</code> 中的同步代码，又遇到 <code>setTimeout</code> 入队</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(<span class="string">&#x27;sync - 2&#x27;</span>)</span><br><span class="line">  <span class="comment">// ... 入队</span></span><br><span class="line">  <span class="title function_">resolve</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b573b3147cac449bbdd360b7d0040144~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="3"><li>执行完成同步代码后，入队 <code>then</code> 微任务 <code>micro-task-queue</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(<span class="string">&#x27;then - 2&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aba2db1de2e148a792c68f7ed33a67bb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="4"><li>此时同步代码已经执行完毕出栈，依次执行 <code>micro-task-queue</code> 中的任务</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1926ff84546c408088512b89f43ed0d1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="5"><li><code>micro-task-queue</code> 清空，执行 <code>macro-task-queue</code> 队首 <code>setTimeout1</code></li></ol><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94d9228a051c4d3bbbab38413482184b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="6"><li>执行完 <code>new Promise</code> 中的同步代码，<code>then2</code> 入队 <code>micro-task-queue</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;timer - 1&#x27;</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(<span class="string">&#x27;sync - 1&#x27;</span>)</span><br><span class="line">  <span class="title function_">resolve</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfdcb95ada344a14ab906ac31c9293c4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="7"><li>执行完 <code>setTimeout1</code> 后，接着清空 <code>micro-task-queue</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(<span class="string">&#x27;then - 1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/526a7d304bba4f79a6d2ba0615a29012~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="8"><li>清空后，再次取出 <code>macro-task-queue</code> 队首，同样的操作，执行遇到 <code>microTask</code> 后又入队 <code>then3</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(<span class="string">&#x27;timer - 2&#x27;</span>)</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;sync - 3&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;then - 3&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/028d3ea33fa14654940a6ddddbd7b088~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="9"><li>执行完最后的 <code>then3</code> 后，数组收集到的数据应该为</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&#x27;sync - 2&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;then - 2&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;timer - 1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sync - 1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;then - 1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;timer - 2&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sync - 3&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;then - 3&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="NodeJS-中的-EventLoop"><a href="#NodeJS-中的-EventLoop" class="headerlink" title="NodeJS 中的 EventLoop"></a>NodeJS 中的 EventLoop</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57cb335d4ce64a6883a6d5bbe4bac203~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li><strong>times</strong>：执行 <code>setTimeout()</code> 和 <code>setInterval()</code> 中定义的回调函数</li><li><strong>pending callbacks</strong>：处理网络I&#x2F;O或文件I&#x2F;O中的错误的回调（比较少见）</li><li><strong>idle, prepare</strong>：仅系统内部使用（忽略）</li><li><strong>poll</strong>：执行 I&#x2F;O 回调，处理轮询队列中的事件，同时检查定时器是否过期 <ul><li><strong>poll 阶段处理的回调中，如果既派发了 setImmediate、又派发了 setTimeout，一定是先执行 setImmediate，再执行 setTimeout。</strong></li></ul></li><li><strong>check</strong>：执行<code>setImmediate()</code> 中定义的回调函数</li><li><strong>close callbacks</strong>：处理“关闭”的回调函数，<code>socket.on(&#39;close&#39;, ...)</code></li></ul><h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>宏任务队列</p><ol><li><code>Timers Queue</code></li><li><code>IO Callbacks Queue</code></li><li><code>Check Queue</code></li><li><code>Close Callbacks Queue</code></li></ol><p>微任务队列</p><ol><li><code>Next Tick Queue</code>：放置 <code>process.nextTick(callback)</code></li><li><code>Other Micro Queue</code>：放置其他微任务</li></ol><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>一队一队执行！</p><ol><li>执行 <code>script</code> 同步代码</li><li>执行 <code>microTaskQueue</code>，优先清空 <code>Next Tick Queue</code> 中的任务，随后才会清空其它微任务<ol><li>先执行 <code>Next Tick Queue</code>，所有<code>callbacks</code>会被依次调用</li><li>再执行 <code>Other Mico Queue</code></li></ol></li><li>执行 <code>macroTaskQueue</code><ol><li>每个阶段的宏任务执行完后执行微任务</li></ol></li></ol><p>需要特别注意的是</p><blockquote><p>Node11开始，timers 阶段的setTimeout、setInterval等函数派发的任务、包括 setImmediate 派发的任务，都被修改为：一旦执行完当前阶段的一个任务，就立刻执行微任务队列。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer 1&#x27;</span>)</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then 1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer 2&#x27;</span>)</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then 2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38c87921568c4002902ddadc710bd337~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><a href="https://github.com/Luoyuda/js-demo/tree/master/js/EventLoop">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c301abed6964afcbb256244ac481da0~tplv-k3u1fbpfcp-watermark.image&quot; alt=&quot;微信截图_2</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="EventLoop" scheme="https://luoyuda.github.io/tags/EventLoop/"/>
    
    <category term="队列" scheme="https://luoyuda.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>排序算法 - 堆排序 （JavaScript实现）</title>
    <link href="https://luoyuda.github.io/2022/04/10/Sort/heap/"/>
    <id>https://luoyuda.github.io/2022/04/10/Sort/heap/</id>
    <published>2022-04-10T12:35:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p><ol><li>最大堆<ol><li>堆内所有节点都大于或等于其孩子的节点值</li><li>堆顶元素就是堆内的最大值</li></ol></li><li>最小堆<ol><li>堆内所有节点都小于或等于其孩子的节点只</li><li>堆顶元素就是堆内最大值</li></ol></li></ol><h2 id="实现一个堆"><a href="#实现一个堆" class="headerlink" title="实现一个堆"></a>实现一个堆</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">size</span>)&#123; &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">size</span>() &#123; &#125;</span><br><span class="line">  <span class="comment">// 比较函数</span></span><br><span class="line">  <span class="title function_">handle</span>(<span class="params">i, j</span>)&#123; &#125;</span><br><span class="line">  <span class="comment">// 添加元素</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">el</span>)&#123; &#125;</span><br><span class="line">  <span class="comment">// 弹出元素</span></span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line">  <span class="comment">// 上浮</span></span><br><span class="line">  <span class="title function_">up</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line">  <span class="comment">// 下沉</span></span><br><span class="line">  <span class="title function_">down</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line">  <span class="comment">// 获取堆顶元素</span></span><br><span class="line">  <span class="title function_">peek</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxHeap</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Heap</span> &#123;</span><br><span class="line">  <span class="title function_">handle</span>(<span class="params">i, j</span>)&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinHeap</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Heap</span> &#123;</span><br><span class="line">  <span class="title function_">handle</span>(<span class="params">i, j</span>)&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一些辅助函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> helper = &#123;</span><br><span class="line">  <span class="comment">// 交换数组中的值</span></span><br><span class="line">  <span class="title function_">swap</span>(<span class="params">arr, i, j</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = arr[i]</span><br><span class="line">    arr[i] = arr[j]</span><br><span class="line">    arr[j] = temp</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取父元素的下标</span></span><br><span class="line">  <span class="title function_">parent</span>(<span class="params">i</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> i &gt;&gt; <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取左孩子下标</span></span><br><span class="line">  <span class="title function_">left</span>(<span class="params">i</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取右孩子下标</span></span><br><span class="line">  <span class="title function_">right</span>(<span class="params">i</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">size</span>)&#123;</span><br><span class="line">  <span class="comment">// 开辟数组空间 heap[0] 表示堆的个数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">heap</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(size + <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 不真的使用第一个下标，方便后续定位</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取堆当前个数"><a href="#获取堆当前个数" class="headerlink" title="获取堆当前个数"></a>获取堆当前个数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接返回数组第一项</span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">size</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">0</span>] &#125;</span><br></pre></td></tr></table></figure><h4 id="获取堆顶元素"><a href="#获取堆顶元素" class="headerlink" title="获取堆顶元素"></a>获取堆顶元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">peek</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="比较函数"><a href="#比较函数" class="headerlink" title="比较函数"></a>比较函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handle</span>(<span class="params">i, j</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>[i] &lt; <span class="variable language_">this</span>.<span class="property">heap</span>[j]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最大堆、最小堆继承父类，修改handle函数"><a href="#最大堆、最小堆继承父类，修改handle函数" class="headerlink" title="最大堆、最小堆继承父类，修改handle函数"></a>最大堆、最小堆继承父类，修改<code>handle</code>函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MaxHeap</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Heap</span> &#123;</span><br><span class="line">  <span class="title function_">handle</span>(<span class="params">i, j</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>[i] &gt; <span class="variable language_">this</span>.<span class="property">heap</span>[j]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinHeap</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Heap</span> &#123;</span><br><span class="line">  <span class="title function_">handle</span>(<span class="params">i, j</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>[i] &lt; <span class="variable language_">this</span>.<span class="property">heap</span>[j]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>将元素插入到完全二叉树的最后一个节点，并执行堆上浮操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line"><span class="title function_">add</span>(<span class="params">el</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">size</span> &gt;= <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="property">length</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  <span class="comment">// 往尾部插入元素后进行上浮操作</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="variable language_">this</span>.<span class="property">size</span>] = el</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">up</span>()</span><br><span class="line">  <span class="keyword">return</span> el</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="上浮"><a href="#上浮" class="headerlink" title="上浮"></a>上浮</h5><p>将节点与其父节点进行比较，如果不满足堆条件则和父节点交换，直到满足条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">up</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">size</span></span><br><span class="line">  <span class="keyword">let</span> j = helper.<span class="title function_">parent</span>(i)</span><br><span class="line">  <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="title function_">handle</span>(i, j) &amp;&amp; i &gt; <span class="number">1</span>)&#123;</span><br><span class="line">    helper.<span class="title function_">swap</span>(<span class="variable language_">this</span>.<span class="property">heap</span>, i, j)</span><br><span class="line">    i = j</span><br><span class="line">    j = helper.<span class="title function_">parent</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="弹出元素"><a href="#弹出元素" class="headerlink" title="弹出元素"></a>弹出元素</h4><p>将堆顶元素删除，把最后一个节点复制到堆顶，然后将堆顶元素执行下沉操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 弹出元素</span></span><br><span class="line"><span class="title function_">pop</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">size</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  <span class="comment">// 弹出堆顶后将最后一个元素放置到堆顶，然后执行下沉操作</span></span><br><span class="line">  <span class="keyword">let</span> el = <span class="variable language_">this</span>.<span class="title function_">peek</span>()</span><br><span class="line">  helper.<span class="title function_">swap</span>(<span class="variable language_">this</span>.<span class="property">heap</span>, <span class="number">1</span>, <span class="variable language_">this</span>.<span class="property">size</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="variable language_">this</span>.<span class="property">size</span>] = <span class="literal">undefined</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">down</span>()</span><br><span class="line">  <span class="keyword">return</span> el</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="下沉"><a href="#下沉" class="headerlink" title="下沉"></a>下沉</h5><p>将节点与子节点比较，与较小&#x2F;较大的节点交换，直到满足条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">down</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(i &lt; <span class="variable language_">this</span>.<span class="property">size</span> &amp;&amp; i &lt;= <span class="variable language_">this</span>.<span class="property">size</span> / <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">// 获取左右孩子下标</span></span><br><span class="line">    <span class="keyword">let</span> l = helper.<span class="title function_">left</span>(i)</span><br><span class="line">    <span class="keyword">let</span> r = helper.<span class="title function_">right</span>(i)</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">handle</span>(r, i) || <span class="variable language_">this</span>.<span class="title function_">handle</span>(l, i))&#123;</span><br><span class="line">      <span class="comment">// 如果有一个不满足，则进入判断</span></span><br><span class="line">      <span class="keyword">let</span> j = <span class="variable language_">this</span>.<span class="title function_">handle</span>(r, l) ? r : l</span><br><span class="line">      helper.<span class="title function_">swap</span>(<span class="variable language_">this</span>.<span class="property">heap</span>, i, j)</span><br><span class="line">      i = j</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 找到合适位置，跳出</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> helper = &#123;</span><br><span class="line">  <span class="title function_">swap</span>(<span class="params">arr, i, j</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = arr[i]</span><br><span class="line">    arr[i] = arr[j]</span><br><span class="line">    arr[j] = temp</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">parent</span>(<span class="params">i</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> i &gt;&gt; <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">left</span>(<span class="params">i</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">right</span>(<span class="params">i</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">size</span>)&#123;</span><br><span class="line">    <span class="comment">// 开辟数组空间 heap[0] 表示堆的个数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(size + <span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">size</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">0</span>] &#125;</span><br><span class="line">  <span class="title function_">handle</span>(<span class="params">i, j</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>[i] &lt; <span class="variable language_">this</span>.<span class="property">heap</span>[j]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加元素</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">el</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">size</span> &gt;= <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="property">length</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="comment">// 往尾部插入元素后进行上浮操作</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="variable language_">this</span>.<span class="property">size</span>] = el</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">up</span>()</span><br><span class="line">    <span class="keyword">return</span> el</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 弹出元素</span></span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">size</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="comment">// 弹出堆顶后将最后一个元素放置到堆顶，然后执行下沉操作</span></span><br><span class="line">    <span class="keyword">let</span> el = <span class="variable language_">this</span>.<span class="title function_">peek</span>()</span><br><span class="line">    helper.<span class="title function_">swap</span>(<span class="variable language_">this</span>.<span class="property">heap</span>, <span class="number">1</span>, <span class="variable language_">this</span>.<span class="property">size</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="variable language_">this</span>.<span class="property">size</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">down</span>()</span><br><span class="line">    <span class="keyword">return</span> el</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 上浮</span></span><br><span class="line">  <span class="title function_">up</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">size</span></span><br><span class="line">    <span class="keyword">let</span> j = helper.<span class="title function_">parent</span>(i)</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="title function_">handle</span>(i, j) &amp;&amp; i &gt; <span class="number">1</span>)&#123;</span><br><span class="line">      helper.<span class="title function_">swap</span>(<span class="variable language_">this</span>.<span class="property">heap</span>, i, j)</span><br><span class="line">      i = j</span><br><span class="line">      j = helper.<span class="title function_">parent</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 下沉</span></span><br><span class="line">  <span class="title function_">down</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="variable language_">this</span>.<span class="property">size</span> &amp;&amp; i &lt;= <span class="variable language_">this</span>.<span class="property">size</span> / <span class="number">2</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> l = helper.<span class="title function_">left</span>(i)</span><br><span class="line">      <span class="keyword">let</span> r = helper.<span class="title function_">right</span>(i)</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">handle</span>(r, i) || <span class="variable language_">this</span>.<span class="title function_">handle</span>(l, i))&#123;</span><br><span class="line">        <span class="keyword">let</span> j = <span class="variable language_">this</span>.<span class="title function_">handle</span>(r, l) ? r : l</span><br><span class="line">        helper.<span class="title function_">swap</span>(<span class="variable language_">this</span>.<span class="property">heap</span>, i, j)</span><br><span class="line">        i = j</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取堆顶元素</span></span><br><span class="line">  <span class="title function_">peek</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxHeap</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Heap</span> &#123;</span><br><span class="line">  <span class="title function_">handle</span>(<span class="params">i, j</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>[i] &gt; <span class="variable language_">this</span>.<span class="property">heap</span>[j]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinHeap</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Heap</span> &#123;</span><br><span class="line">  <span class="title function_">handle</span>(<span class="params">i, j</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>[i] &lt; <span class="variable language_">this</span>.<span class="property">heap</span>[j]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sortArray = <span class="keyword">function</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> n = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">let</span> heap = <span class="keyword">new</span> <span class="title class_">MinHeap</span>(n)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    heap.<span class="title function_">add</span>(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    arr[i] = heap.<span class="title function_">pop</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f508c99ca5f5422ea5882b692bb4f309~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d63e7a6b851b42599fc47acb0ee764c0~tplv-k3u1fbpfcp-watermark.image" alt="GIF.gif"></p><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th><th>排序方式</th><th>稳定性</th></tr></thead><tbody><tr><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n)</td><td>in-place</td><td>不稳定</td></tr></tbody></table><p><a href="https://github.com/Luoyuda/js-demo/tree/master/algorithm/Sort/HeapSort">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;堆排序&quot;&gt;&lt;a href=&quot;#堆排序&quot; class=&quot;headerlink&quot; title=&quot;堆排序&quot;&gt;&lt;/a&gt;堆排序&lt;/h2&gt;&lt;p&gt;利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="算法" scheme="https://luoyuda.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="https://luoyuda.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    <category term="堆排序" scheme="https://luoyuda.github.io/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>作用域、执行上下文、作用域链相关知识（JavaScript）</title>
    <link href="https://luoyuda.github.io/2022/04/09/JavaScript/scope/"/>
    <id>https://luoyuda.github.io/2022/04/09/JavaScript/scope/</id>
    <published>2022-04-09T04:35:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<p>一起养成写作习惯！这是我参与「掘金日新计划 · 4 月更文挑战」的第9天，<a href="https://juejin.cn/post/7080800226365145118" title="https://juejin.cn/post/7080800226365145118">点击查看活动详情</a>。</p><h2 id="作用域（scope）"><a href="#作用域（scope）" class="headerlink" title="作用域（scope）"></a>作用域（scope）</h2><p>作用域（scope），它规定了如何去查找变量的规则。通俗点就是说当前执行代码对变量的访问权限</p><p>比如我当前定义了这三个值 <code>a</code> <code>b</code> <code>c</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0e943658dd848dea28be836d73bf98d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p><strong>变量只有在声明之后才能在作用域中查找到它</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b) <span class="comment">// 报错！抛出 ReferenceError b is not defined</span></span><br><span class="line">  b = a</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b) <span class="comment">// 2 + undefined = NaN</span></span><br><span class="line">  <span class="keyword">var</span> b = a</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b) <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>上面代码实际等同于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> b</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b) <span class="comment">// 2 + undefined = NaN</span></span><br><span class="line">  b = a</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b) <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="如何声明"><a href="#如何声明" class="headerlink" title="如何声明"></a>如何声明</h4><ul><li><code>var</code>：在编译器解析时，会将 <code>var a = 1</code> 视为 <code>var a</code> <code>a = 1</code> 两段执行，存在<strong>变量提升</strong>！</li><li><code>let</code>：重复声明报错，属<strong>块级作用域</strong>，存在<strong>变量提升</strong>，但会<strong>暂时性死区</strong></li><li><code>const</code>：重复声明报错，属<strong>块级作用域</strong>，存在<strong>变量提升</strong>，但会<strong>暂时性死区</strong>。内容<strong>只读</strong>，修改报错，但引用类型保存的是指针</li><li><code>function</code>：函数声明，直接提升到最上面，提升优先级最高，<strong>且已完成赋值</strong>！</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0609e06c712b4d1fa17e12cd6768f7a2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="静态作用域（词法作用域）"><a href="#静态作用域（词法作用域）" class="headerlink" title="静态作用域（词法作用域）"></a>静态作用域（词法作用域）</h2><p><strong>静态作用域（词法作用域）</strong>，采用词法作用域的变量叫<strong>词法变量</strong>。词法变量有一个在编译时静态确定的作用域。词法变量的作用域可以是一个函数或一段代码，该变量在这段代码区域内可见；在这段区域以外该变量不可见。如图 <code>scope1</code> 与 <code>scope2</code> 是互相隔离的，作用域链沿<strong>定义的位置</strong>往外延伸</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddf949b451514bd7a22b476fc690fee4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>词法作用域里，取变量的值时，会检查函数定义时的文本环境，捕捉函数定义时对该变量的绑定。</p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p><strong>全局作用域</strong>：声明在任何函数之外的顶层作用域的变量就是全局变量，变量拥有全局作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span> <span class="comment">// 最外层声明，全局变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>)&#123;</span><br><span class="line">  c = <span class="number">1</span> <span class="comment">// 不使用 var 声明也会被当作全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">b</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, c) <span class="comment">// 可以访问全局作用域的变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">d</span>()</span><br></pre></td></tr></table></figure><h3 id="函数作用域（局部作用域）"><a href="#函数作用域（局部作用域）" class="headerlink" title="函数作用域（局部作用域）"></a>函数作用域（局部作用域）</h3><p><strong>全局作用域</strong>：声明在函数内的顶变量，拥有函数作用域，外部环境无法访问到函数内部的变量（<strong>模块化的原理</strong>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="块作用域（局部作用域）"><a href="#块作用域（局部作用域）" class="headerlink" title="块作用域（局部作用域）"></a>块作用域（局部作用域）</h3><p><strong>块作用域</strong>：<code>ES6</code> 开始，使用 <code>let</code> 和 <code>const</code> 声明的变量拥有块级作用域，作用域范围在 <code>&#123;&#125;</code> 之间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b) <span class="comment">// 1 2 属于块级作用域内</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b) <span class="comment">// 报错</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b) <span class="comment">// 1 2</span></span><br></pre></td></tr></table></figure><h4 id="为什么需要块级作用域"><a href="#为什么需要块级作用域" class="headerlink" title="为什么需要块级作用域"></a>为什么需要块级作用域</h4><ol><li>解决声明提前 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li>解决 <code>&#123;&#125;</code> 中 <code>var</code> 声明被视为全局变量 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> d = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="看实际的例子"><a href="#看实际的例子" class="headerlink" title="看实际的例子"></a>看实际的例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> val = <span class="string">&#x27;global&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> ()&#123;</span><br><span class="line">  <span class="keyword">var</span> val = <span class="string">&#x27;fn&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">_fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> val = <span class="string">&#x27;_fn&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> _val = <span class="string">&#x27;inner&#x27;</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span><br><span class="line"><span class="title function_">fn</span>()()</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1604a38ae3b042b685e1a98d393a0211~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f0f90c62b404f1f9865ff8a4f2d8e25~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fb322affeab4d13a7ceb335ad8ab18c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="keyword">if</span>(a)&#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc8837cc7ed74ca185384c152407fb9b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0cce13fb08ef43599cc698c206e76112~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eafd8405286a4cd2b39ba1aa196e524c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="修改词法作用域的方式-eval-与-with-最好不要用！"><a href="#修改词法作用域的方式-eval-与-with-最好不要用！" class="headerlink" title="修改词法作用域的方式 eval 与 with (最好不要用！)"></a>修改词法作用域的方式 <code>eval</code> 与 <code>with</code> (最好不要用！)</h3><ol><li><code>eval</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">fnStr</span>)&#123;</span><br><span class="line">  <span class="built_in">eval</span>(fnStr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;a = &quot;a&quot;&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// a</span></span><br></pre></td></tr></table></figure></li><li><code>with</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">with</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  b = <span class="string">&#x27;change&#x27;</span></span><br><span class="line">  c = <span class="string">&#x27;c&#x27;</span> <span class="comment">// 非严格模式查找键值不存在，会创建一个全局变量!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">b</span>) <span class="comment">// &#x27;change&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// c</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h2><p><strong>动态作用域</strong>，采用变量叫<strong>动态变量</strong>。程序正在执行定义了动态变量的代码段，那么在这段时间内，该变量一直存在；代码段执行结束，该变量便消失。</p><p>作用域链沿着<strong>调用栈</strong>往外延伸，通过逐层检查函数的调用链，并打印第一次遇到的值。</p><p>如果是动态作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> local = <span class="string">&#x27;in global&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> local = <span class="string">&#x27;in A&#x27;</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> local = <span class="string">&#x27;in C&#x27;</span></span><br><span class="line">        <span class="title function_">B</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">B</span>() <span class="comment">// in A!</span></span><br><span class="line">    <span class="title function_">C</span>() <span class="comment">// in C!</span></span><br><span class="line">    <span class="title function_">B</span>() <span class="comment">// in A!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(local)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">B</span>() <span class="comment">// in global!</span></span><br><span class="line"><span class="title function_">A</span>()</span><br></pre></td></tr></table></figure><p>实际上执行是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> local = <span class="string">&#x27;in global&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> local = <span class="string">&#x27;in A&#x27;</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> local = <span class="string">&#x27;in C&#x27;</span></span><br><span class="line">        <span class="title function_">B</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">B</span>() <span class="comment">// in global!</span></span><br><span class="line">    <span class="title function_">C</span>() <span class="comment">// in global!</span></span><br><span class="line">    <span class="title function_">B</span>() <span class="comment">// in global!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(local)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">B</span>() <span class="comment">// in global!</span></span><br><span class="line"><span class="title function_">A</span>()</span><br></pre></td></tr></table></figure><p>无论你在哪个位置调用 <code>B</code> 都只会向上查找到 <code>in global</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4dd5e037b0b04b648536aa5056f40373~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure><ol><li>词法分析：将字符打断成为有意义的片段<code>（token）</code><ul><li>比如上面的声明会被打断成如下 <code>token</code> <a href="https://esprima.org/demo/parse.html#">辅助工具</a></li><li><code>var a = 1</code> &#x3D;&gt; <code>var</code> <code>a</code> <code>=</code> <code>1</code> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;var&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Identifier&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Punctuator&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Numeric&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li></ul></li><li>解析：将每个 <code>token</code> 数组转换成一个嵌套元素的树，也就是抽象语法树<code>AST(Abstract Syntax Tree)</code> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Program&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VariableDeclaration&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;declarations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VariableDeclarator&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Identifier&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;init&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Literal&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;raw&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;var&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>代码生成：将抽象语法树转换成可执行代码</li></ol><h2 id="执行上下文（Execution-Context）"><a href="#执行上下文（Execution-Context）" class="headerlink" title="执行上下文（Execution Context）"></a>执行上下文（Execution Context）</h2><p>当 <code>JavaScript</code> 被解析执行时，需要 <code>执行代码的环境</code> 这个环境被称为 执行上下文</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>全局上下文：全局代码所处的环境，不在函数内的代码均执行与全局上下文中</li><li>函数上下文：函数调用时创建的环境</li><li>eval上下文：运行 <code>eval</code> 函数中代码时创建的环境</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ol><li>创建阶段：此时还未执行代码，只做了准备工作<ul><li>创建变量对象：<code>arguments</code>，提升函数声明和变量声明</li><li>创建作用域链：用于解析变量，从内层开始查找，逐步往外层词法作用域中查找</li><li>确定 <code>this</code></li></ul></li><li>执行阶段：开始执行代码，完成变量赋值，函数引用等等</li><li>回收阶段：函数调用完毕后，函数，对应的执行上下文出栈，等待垃圾回收器回收</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">d</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e, b, d)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">c</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol><li>全局上下文创建阶段</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b00a7c58f93b4c189dece6cd3fcd2235~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="2"><li>全局上下文执行阶段</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52ccd51003904a9f8abc86fe2c240151~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="3"><li>遇到函数调用 <code>a(1)</code> <code>a</code> 函数上下文创建阶段，入栈</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b924fa47b744c63a7525f2eb496c955~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="4"><li><code>a</code> 函数上下文执行阶段</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a0e3386c7cd45e9ae0e72d2df70a5dd~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="5"><li><code>c()</code> 函数调用， <code>c</code> 函数上下文创建阶段，入栈</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/560df9c20937494a8f0f9c262d08f8ac~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="6"><li><code>c</code> 执行完毕，出栈</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b35510c6d96b4298ac3c19dbca20339a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="7"><li><code>a</code> 执行完毕，出栈</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4470da388d034be0bc8b8905a418257e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>全局执行上下文在代码开始时创建，有且只有一个，且永远再栈底</li><li>函数被调用时就会创建函数执行上下文，后入栈。<strong>（根据调用创建）</strong></li></ol><h3 id="变量对象（Variable-Object，VO）"><a href="#变量对象（Variable-Object，VO）" class="headerlink" title="变量对象（Variable Object，VO）"></a>变量对象（Variable Object，VO）</h3><p>变量对象时上下文相关的数据作用域，存储了上下文定义的变量和函数声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">0</span></span><br><span class="line"><span class="comment">/* 全局执行上下文的变量对象则是 window</span></span><br><span class="line"><span class="comment">window = &#123;</span></span><br><span class="line"><span class="comment">  e: 0</span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">d</span>)&#123;</span><br><span class="line">  <span class="comment">/* 创建阶段</span></span><br><span class="line"><span class="comment">    VO = &#123;</span></span><br><span class="line"><span class="comment">      arguments: &#123; 0: 1, length: 1 &#125;</span></span><br><span class="line"><span class="comment">      b: undefined</span></span><br><span class="line"><span class="comment">      c: fn()</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span></span><br><span class="line">  <span class="comment">/* 开始执行</span></span><br><span class="line"><span class="comment">    AO = &#123;</span></span><br><span class="line"><span class="comment">      arguments: &#123; 0: 1, length: 1 &#125;</span></span><br><span class="line"><span class="comment">      b: 1</span></span><br><span class="line"><span class="comment">      c: fn()</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">/* 开始执行</span></span><br><span class="line"><span class="comment">      AO = &#123;</span></span><br><span class="line"><span class="comment">        arguments: &#123; &#125;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e, b, d) <span class="comment">// 向外层的作用域查询到变量 e, b,d</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">c</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="作用域链（Scope-Chain）"><a href="#作用域链（Scope-Chain）" class="headerlink" title="作用域链（Scope Chain）"></a>作用域链（Scope Chain）</h3><p>多个变量对象构成的链表则为作用域链（Scope Chain），从离它最近的变量对象（VO）开始查找变量，逐级往上</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/642276fe5e0f473288b0381a815e647a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一起养成写作习惯！这是我参与「掘金日新计划 · 4 月更文挑战」的第9天，&lt;a href=&quot;https://juejin.cn/post/7080800226365145118&quot; title=&quot;https://juejin.cn/post/70808002263651451</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="作用域" scheme="https://luoyuda.github.io/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
    <category term="执行上下文" scheme="https://luoyuda.github.io/tags/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
    <category term="作用域链" scheme="https://luoyuda.github.io/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>排序算法 - 计数排序 （JavaScript实现）</title>
    <link href="https://luoyuda.github.io/2022/04/08/Sort/count/"/>
    <id>https://luoyuda.github.io/2022/04/08/Sort/count/</id>
    <published>2022-04-08T08:35:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>计数排序（Counting sort）是一种稳定的线性时间排序算法。它的复杂度为 <code>Ο(n+k)</code>（其中 <code>k</code> 是整数的范围大小）</p><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>对于给定的输入序列中的每一个元素x，确定该序列中值小于x的元素的个数（此处并非比较各元素的大小，而是通过对元素值的计数和计数值的累加来确定）。然后顺序输出</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">CountingSort</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 判空及防止数组越界</span></span><br><span class="line">  <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="comment">// 找最大最小</span></span><br><span class="line">  <span class="keyword">let</span> min = <span class="title class_">Math</span>.<span class="title function_">min</span>(...arr)</span><br><span class="line">  <span class="keyword">let</span> range = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr) - min + <span class="number">1</span></span><br><span class="line">  <span class="comment">// 建立长度为 range 的数组，下标 0~8 对应数字 1~9</span></span><br><span class="line">  <span class="keyword">let</span> counting = <span class="keyword">new</span> <span class="title class_">Array</span>(range).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="comment">// 遍历 arr 中的每个元素</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="comment">// 将每个整数出现的次数统计到计数数组中对应下标的位置</span></span><br><span class="line">    counting[x - min] += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 记录前面比自己小的数字的总数</span></span><br><span class="line">  <span class="keyword">let</span> preCounts = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; counting.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 将 counting 计算成当前数字在结果中的起始下标位置。位置 = 前面比自己小的数字的总数。</span></span><br><span class="line">    preCounts += counting[i]</span><br><span class="line">    <span class="comment">// 当前的数字比下一个数字小，累计到 preCounts 中</span></span><br><span class="line">    counting[i] = preCounts - counting[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="title class_">Array</span>(arr.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="comment">// counting[x - 1] 表示此元素在结果数组中的下标</span></span><br><span class="line">    <span class="keyword">let</span> index = counting[x - min]</span><br><span class="line">    result[index] = x</span><br><span class="line">    <span class="comment">// 更新 counting[x - 1]，指向此元素的下一个下标</span></span><br><span class="line">    counting[x-min]+=<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    arr[i] = result[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f208a03b14fa4c2c9ecd1f55feba7e42~tplv-k3u1fbpfcp-watermark.image" alt="GIF.gif"></p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><p>假如当前输入 <code>[0,2,3,4,1,5,3,1,6,3,6,7,1,2]</code></p><ol><li><p>找出 <code>max = 7</code> 和 <code>min = 0</code>，生成一个数组 <code>counting = [0, 0, 0, 0, 0, 0, 0, 0]</code> 用于计数</p></li><li><p>遍历 <code>arr</code> 对每个数进行收集， <code>[1, 3, 2, 3, 1, 1, 2, 1]</code></p></li><li><p>记录比自己小的数字的总数 <code>counting = [0, 1, 4, 6, 9, 10, 11, 13]</code></p></li><li><p>初始化新数组 <code>[empty × 14]</code>，再遍历 <code>arr</code></p><ol><li><code>x = 0</code>, <code>counting[0] = 0</code> <code>counting[0]++</code><ol><li><code>result = [0, empty × 13]</code></li><li><code>counting = [1, 1, 4, 6, 9, 10, 11, 13]</code></li></ol></li><li><code>x = 2</code>, <code>counting[2] = 4</code> <code>counting[2]++</code><ol><li><code>result = [0,  empty × 3, 2,  empty × 9]</code></li><li><code>counting = [1, 1, 5, 6, 9, 10, 11, 13]</code></li></ol></li><li><code>x = 3</code>, <code>counting[3] = 6</code> <code>counting[3]++</code><ol><li><code>result = [0,  empty × 3, 2,  empty × 1, 3, empty × 7]</code></li><li><code>counting = [1, 1, 5, 7, 9, 10, 11, 13]</code></li></ol></li><li><code>x = 4</code>, <code>counting[4] = 9</code> <code>counting[4]++</code><ol><li><code>result = [0,  empty × 3, 2,  empty × 1, 3, empty × 2, 4, empty × 4]</code></li><li><code>counting = [1, 1, 5, 7, 10, 10, 11, 13]</code></li></ol></li><li><code>x = 1</code>, <code>counting[1] = 1</code> <code>counting[1]++</code><ol><li><code>result = [0, 1, empty × 2, 2,  empty × 1, 3, empty × 2, 4, empty × 4]</code></li><li><code>counting = [1, 2, 5, 7, 10, 10, 11, 13]</code></li></ol></li><li><code>x = 5</code>, <code>counting[5] = 10</code> <code>counting[5]++</code><ol><li><code>result = [0, 1, empty × 2, 2,  empty × 1, 3, empty × 2, 4, 5, empty × 3]</code></li><li><code>counting = [1, 2, 5, 7, 10, 11, 11, 13]</code></li></ol></li><li><code>x = 3</code>, <code>counting[3] = 7</code> <code>counting[3]++</code><ol><li><code>result = [0, 1, empty × 2, 2,  empty × 1, 3, 3, empty × 1, 4, 5, empty × 3]</code></li><li><code>counting = [1, 2, 5, 8, 10, 11, 11, 13]</code></li></ol></li><li><code>x = 1</code>, <code>counting[1] = 2</code> <code>counting[1]++</code><ol><li><code>result = [0, 1, 1, empty × 1, 2,  empty × 1, 3, 3, empty × 1, 4, 5, empty × 3]</code></li><li><code>counting = [1, 3, 5, 8, 10, 11, 11, 13]</code></li></ol></li><li><code>x = 6</code>, <code>counting[6] = 11</code> <code>counting[6]++</code><ol><li><code>result = [0, 1, 1, empty × 1, 2,  empty × 1, 3, 3, empty × 1, 4, 5, 6, empty × 2]</code></li><li><code>counting = [1, 3, 5, 8, 10, 11, 12, 13]</code></li></ol></li><li><code>x = 3</code>, <code>counting[3] = 8</code> <code>counting[3]++</code><ol><li><code>result = [0, 1, 1, empty × 1, 2,  empty × 1, 3, 3, 3, 4, 5, 6, empty × 2]</code></li><li><code>counting = [1, 3, 5, 9, 10, 11, 13, 13]</code></li></ol></li><li><code>x = 6</code>, <code>counting[6] = 12</code> <code>counting[6]++</code><ol><li><code>result = [0, 1, 1, empty × 1, 2,  empty × 1, 3, 3, 3, 4, 5, 6, 6, empty × 1]</code></li><li><code>counting = [1, 3, 5, 9, 10, 11, 13, 13]</code></li></ol></li><li><code>x = 7</code>, <code>counting[6] = 13</code> <code>counting[7]++</code><ol><li><code>result = [0, 1, 1, empty × 1, 2,  empty × 1, 3, 3, 3, 4, 5, 6, 6, 7]</code></li><li><code>counting = [1, 3, 5, 9, 10, 11, 13, 14]</code></li></ol></li><li><code>x = 1</code>, <code>counting[1] = 3</code> <code>counting[1]++</code><ol><li><code>result = [0, 1, 1, 1, 2,  empty × 1, 3, 3, 3, 4, 5, 6, 6, 7]</code></li><li><code>counting = [1, 4, 5, 9, 10, 11, 13, 14]</code></li></ol></li><li><code>x = 2</code>, <code>counting[2] = 5</code> <code>counting[2]++</code><ol><li><code>result = [0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 6, 6, 7]</code></li><li><code>counting = [1, 4, 6, 9, 10, 11, 13, 14]</code></li></ol></li></ol></li><li><p>最后输出数组 <code>[0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 6, 6, 7]</code></p></li></ol><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th><th>排序方式</th><th>稳定性</th></tr></thead><tbody><tr><td>O(n+k)</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n+k)</td><td>out-place</td><td>稳定</td></tr></tbody></table><p><a href="https://github.com/Luoyuda/js-demo/tree/master/algorithm/Sort/CountingSort">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计数排序&quot;&gt;&lt;a href=&quot;#计数排序&quot; class=&quot;headerlink&quot; title=&quot;计数排序&quot;&gt;&lt;/a&gt;计数排序&lt;/h1&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="算法" scheme="https://luoyuda.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="https://luoyuda.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    <category term="计数排序" scheme="https://luoyuda.github.io/tags/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序算法 - 快速排序 （JavaScript实现）</title>
    <link href="https://luoyuda.github.io/2022/04/08/Sort/quick/"/>
    <id>https://luoyuda.github.io/2022/04/08/Sort/quick/</id>
    <published>2022-04-08T04:35:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>快速排序借用了分治的思想, 并且基于冒泡排序做了改进。 它将数组拆分为两个子数组, 其中一个子数组的所有元素都比另一个子数组的元素小, 然后对这两个子数组再重复进行上述操作, 直到数组不可拆分, 排序完成。</p><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><ul><li>从数组中取出一个数，称之为基数（pivot）</li><li>遍历数组，将比基数大的数字放到它的右边，比基数小的数字放到它的左边</li><li>遍历完成后，数组被分成了左右两个区域</li><li>将左右两个区域视为两个数组，重复前两个步骤，直到排序完成</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h3><ul><li><code>sortArray</code>：入口方法</li><li><code>QuickSort</code>：递归方法，负责不停的划分，直到 <code>p</code> <code>q</code> 指针对撞</li><li><code>partition</code>: 划分函数，根据 <code>pivot</code> 划分区域，然后返回中点，中点右边的值均大于 <code>pivot</code>，左边的值均小于 <code>pivot</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 排序函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sortArray</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">QuickSort</span>(arr, <span class="number">0</span>, arr.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// QuickSort</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">QuickSort</span>(<span class="params">arr, p, q</span>)&#123;</span><br><span class="line">  <span class="comment">// 此时排序已完成</span></span><br><span class="line">  <span class="keyword">if</span>(p &gt;= q) <span class="keyword">return</span> arr</span><br><span class="line">  <span class="comment">// 通过划分函数获得中点</span></span><br><span class="line">  <span class="keyword">let</span> m = <span class="title function_">partition</span>(arr, p, q)</span><br><span class="line">  <span class="comment">// 接着视为两个区域进行递归</span></span><br><span class="line">  <span class="title class_">QuickSort</span>(arr, p, m - <span class="number">1</span>)</span><br><span class="line">  <span class="title class_">QuickSort</span>(arr, m + <span class="number">1</span>, q)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 划分函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">arr, p, q</span>)&#123;</span><br><span class="line">  <span class="comment">// 重点是划分函数的实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h3><p>按照基本思想进行</p><ul><li>选取一个基准点 <code>pivot</code>, 定义两个指针 <code>i = p</code>, <code>j = p + 1</code></li><li>移动 <code>j</code> 指针找到 比 <code>pivot</code> 小的，移动 <code>i</code> 指针，将其与 <code>i</code> 换位</li><li>直到 <code>j &gt; q</code> 之后跳出循环</li><li>最后将 <code>p</code> 与 <code>i</code> 进行互换，返回 <code>i</code> 指针</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">arr, p, q</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> pivot = arr[p]</span><br><span class="line">  <span class="keyword">let</span> i = p</span><br><span class="line">  <span class="keyword">let</span> j = p + <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(j &lt;= q)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[j] &lt; pivot)&#123;</span><br><span class="line">      i++</span><br><span class="line">      <span class="title function_">swap</span>(arr, i, j)</span><br><span class="line">    &#125;</span><br><span class="line">    j++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">swap</span>(arr, i, p)</span><br><span class="line">  <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0732030c7044c9ba33d4102afab7f11~tplv-k3u1fbpfcp-watermark.image" alt="GIF.gif"></p><h4 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h4><ol><li><p><code>arr = [15, 9, 31, 21, 44, 22, 33, 18, 2]</code> <code>p = 0</code> <code>q = arr.length - 1 = 8</code></p></li><li><p><code>pivot = arr[0]</code> <code>i = 0</code> <code>j = 1</code> 开始比对</p><ol><li><code>9 &lt; 15</code> <code>i++; i = 1</code> <code>swap(1, 1)</code> <code>arr</code> 不变</li><li><code>31 &gt; 15</code>, <code>21 &gt; 15</code>, <code>44 &gt; 15</code>, <code>22 &gt; 15</code>, <code>33 &gt; 15</code>, <code>18 &gt; 15</code>（跳过）</li><li><code>2 &lt; 15</code> <code>i++; i = 2</code> <code>swap(2, 8)</code> <code>[15, 9, 2, 21, 44, 22, 33, 18, 31]</code></li></ol></li><li><p><code>i = 2, p = 0</code> <code>swap(0, 2)</code> <code>[2, 9, 15, 21, 44, 22, 33, 18, 31]</code></p></li><li><p>返回 <code>i = 2</code>, <code>QuickSort(arr, 0, 1)</code> <code> QuickSort(arr, 3, 8)</code></p></li><li><p><code>QuickSort(arr, 0, 1)</code> <code>arr = [2, 9, 15, 21, 44, 22, 33, 18, 31]</code> <code>p = 0</code> <code>q = 1</code> <code>i = 0</code> <code>j = 2</code> <code>swap(0, 0)</code> 返回 <code>i = 0</code> , <code>QuickSort(arr, 0, -1)</code>（跳过） <code> QuickSort(arr, 1, 1)</code> （跳过）</p></li><li><p><code>QuickSort(arr, 3, 8)</code> &#x3D;&gt; <code>partition(arr, 3, 8)</code></p></li><li><p><code>[..., 21, 44, 22, 33, 18, 31]</code> <code>i = 3</code> <code>j = 4</code> <code>pivot = 21</code></p><ol><li><code>44 &gt; 21</code>, <code>22 &gt; 21</code>, <code>33 &gt; 21</code> （跳过）</li><li><code>18 &lt; 21</code> <code>i = 4, j = 7</code> <code>swap(4, 7)</code> <code>[..., 21, 18, 22, 33, 44, 31]</code></li><li><code>31 &gt; 21</code>（跳过），<code>i = 4, p = 3</code>, <code>swap(3, 4)</code> <code>[..., 18, 21, 22, 33, 44, 31]</code></li></ol></li><li><p>返回 <code>i = 4</code> <code>QuickSort(arr, 3, 3)</code> （跳过）</p></li><li><p><code>QuickSort(arr, 5, 8)</code> &#x3D;&gt; <code>partition(arr, 5, 8)</code></p></li><li><p><code>[..., 22, 33, 44, 31]</code> <code>i = 5, j = 6</code> <code>pivot = 22</code> （跳过）</p></li><li><p>返回 <code>i = 5</code> <code>QuickSort(arr, 4, 4)</code></p></li><li><p><code>QuickSort(arr, 6, 8)</code> <code>[..., 33, 44, 31]</code> <code>i = 6, j = 7, pivot = 33</code></p><ol><li><code>44 &gt; 33</code> （跳过）</li><li><code>31 &lt; 33</code> <code>i = 7, j = 8</code> <code>swap(7, 8)</code> <code>[..., 33, 31, 44]</code></li><li><code>i = 7, p = 6</code> <code>swap(6, 7)</code> <code>[..., 31, 33, 44]</code></li></ol></li><li><p>返回 <code>i = 7</code> <code>QuickSort(arr, 6, 6)</code>（跳过） <code>QuickSort(arr, 8, 8)</code>（跳过）</p></li><li><p>排序完成 <code>[2, 9, 15, 18, 21, 22, 31, 33, 44]</code></p></li></ol><h3 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">partition</span> = (<span class="params">arr, p, q</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 取第一个数为基数</span></span><br><span class="line">  <span class="keyword">let</span> pivot = arr[p]</span><br><span class="line">  <span class="comment">// 从第二个数开始分区 (i, j) = (p + 1, q)</span></span><br><span class="line">  <span class="keyword">let</span> i = p + <span class="number">1</span></span><br><span class="line">  <span class="comment">// 右边界</span></span><br><span class="line">  <span class="keyword">let</span> j = q</span><br><span class="line">  <span class="comment">// 相遇时退出循环</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">    <span class="comment">// 找到第一个大于基数的位置</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= pivot) i++</span><br><span class="line">    <span class="keyword">if</span>(i != j)&#123;</span><br><span class="line">      <span class="comment">// 交换到右分区，使得左边分区都小于或等于基数，右边分区大于或等于基数</span></span><br><span class="line">      <span class="title function_">swap</span>(arr, i, j)</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果两个指针相等，单独比较 arr[j] pivot</span></span><br><span class="line">  <span class="keyword">if</span>(arr[j] &gt; pivot) j--</span><br><span class="line">  <span class="comment">// 将基数和中间树交换</span></span><br><span class="line">  <span class="title function_">swap</span>(arr, p, j)</span><br><span class="line">  <span class="comment">// 返回中间的下标</span></span><br><span class="line">  <span class="keyword">return</span> j</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6674ed9f08a64b5abbfe6d6b152dbe2e~tplv-k3u1fbpfcp-watermark.image" alt="GIF.gif"></p><h4 id="详细过程-1"><a href="#详细过程-1" class="headerlink" title="详细过程"></a>详细过程</h4><ol><li><code>[31, 15, 18, 22, 33, 21, 44, 2, 9]</code> <code>pivot = 31, i = 1, j = 8</code><ol><li><code>15, 18, 22 &lt; 31</code> （跳过）</li><li><code>33 &gt; 31</code> <code>i = 4 j = 8</code> <code>swap(4, 8)</code> <code>[31, 15, 18, 22, 9, 21, 44, 2, 33]</code> <code>j = 7</code></li><li><code>9, 21 &lt; 31</code>（跳过）</li><li><code>44 &gt; 31</code> <code>i = 6 j = 7</code> <code>swap(6, 7)</code> <code>[31, 15, 18, 22, 9, 21, 2, 44, 33]</code> <code>j = 6</code></li><li>跳出循环 <code>arr[6] = 2 &lt; 31</code> <code>swap(0, 6)</code> <code>[2, 15, 18, 22, 9, 21, 31, 44, 33]</code> 返回 <code>j = 6</code></li></ol></li><li><code>QuickSort(arr, 0, 5)</code> 和 <code>QuickSort(arr, 7, 8)</code></li><li><code>QuickSort(arr, 0, 5)</code> &#x3D;&gt; <code>partition(arr, 0, 5)</code> <code>[2, 15, 18, 22, 9, 21]</code> <code>pivot = 2, i = 1, j = 5</code><ol><li><code>15 &gt; 2</code> <code>swap(1, 5)</code> &#x3D;&gt; <code>[2, 21, 18, 22, 9, 15]</code> <code>j = 4</code></li><li><code>21 &gt; 2</code> <code>swap(1, 4)</code> &#x3D;&gt; <code>[2, 9, 18, 22, 21, 15]</code> <code>j = 3</code></li><li><code>9 &gt; 2</code> <code>swap(1, 3)</code> &#x3D;&gt; <code>[2, 22, 18, 9, 21, 15]</code> <code>j = 2</code></li><li><code>22 &gt; 2</code> <code>swap(1, 2)</code> &#x3D;&gt; <code>[2, 18, 22, 9, 21, 15]</code> <code>j = 1</code></li><li>跳出循环 <code>arr[1] = 18 &gt; 2</code> <code>j--</code> <code>swap(0, 0)</code> 返回 <code>j = 0</code></li></ol></li><li><code>QuickSort(arr, 0, -1)</code>（跳过）和 <code>QuickSort(arr, 1, 5)</code></li><li><code>QuickSort(arr, 1, 5)</code> &#x3D;&gt; <code>partition(arr, 1, 5)</code> <code>[18, 22, 9, 21, 15]</code> <code>pivot = 18, i = 2, j = 5</code><ol><li><code>22 &gt; 18</code> <code>swap(2, 5)</code> &#x3D;&gt; <code>[18, 15, 9, 21, 22]</code> <code>j = 4</code></li><li><code>15, 9 &lt; 18</code> （跳过）</li><li><code>21 &gt; 18</code> 此时 <code>i = j = 4</code></li><li>跳出循环 <code>arr[4] = 21 &gt; 18</code> <code>j--</code> <code>swap(2, 3)</code> 返回 <code>j = 3</code> <code>[9, 15, 18, 21, 22]</code></li></ol></li><li><code>QuickSort(arr, 1, 2)</code>（跳过）和 <code>QuickSort(arr, 4, 5)</code>（跳过）</li><li>回到 <code>QuickSort(arr, 7, 8)</code> 交换后完成排序 <code>[2, 9, 15, 18, 21, 22, 31, 33, 44]</code></li></ol><h3 id="第三种写法"><a href="#第三种写法" class="headerlink" title="第三种写法"></a>第三种写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">partition</span> = (<span class="params">arr, p, q</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 取第一个数为基数</span></span><br><span class="line">  <span class="keyword">let</span> pivot = arr[p]</span><br><span class="line">  <span class="comment">// 从第二个数开始分区</span></span><br><span class="line">  <span class="keyword">let</span> i = p + <span class="number">1</span></span><br><span class="line">  <span class="comment">// 右边界</span></span><br><span class="line">  <span class="keyword">let</span> j = q</span><br><span class="line">  <span class="comment">// 相遇时退出循环</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">    <span class="comment">// 找到第一个大于基数的位置</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= pivot) i++</span><br><span class="line">    <span class="comment">// 找到第一个小于基数的位置</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= pivot) j--</span><br><span class="line">    <span class="comment">// 交换到右分区，使得左边分区都小于或等于基数，右边分区大于或等于基数</span></span><br><span class="line">    <span class="title function_">swap</span>(arr, i, j)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果两个指针相等，单独比较 arr[j] pivot</span></span><br><span class="line">  <span class="keyword">if</span>(arr[j] &gt; pivot) j--</span><br><span class="line">  <span class="comment">// 将基数和中间树交换</span></span><br><span class="line">  <span class="title function_">swap</span>(arr, p, j)</span><br><span class="line">  <span class="comment">// 返回中间的下标</span></span><br><span class="line">  <span class="keyword">return</span> j</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be4db0655c1e41e7806dcc1f3c28adfc~tplv-k3u1fbpfcp-watermark.image" alt="GIF.gif"></p><h4 id="详细过程-2"><a href="#详细过程-2" class="headerlink" title="详细过程"></a>详细过程</h4><ol><li><code>[22, 2, 18, 31, 33, 9, 15, 44, 21]</code> <code>pivot = 22</code> <code>i = 1, j = 8</code><ol><li><code>2, 18 &lt; 22</code> （跳过），<code>31 &gt; 22</code> <code>i = 3</code></li><li><code>21 &lt; 22</code>  <code>j = 8</code></li><li><code>swap(3, 8)</code> <code>[22, 2, 18, 21, 33, 9, 15, 44, 31]</code></li><li><code>21 &lt; 22</code>（跳过） <code>33 &gt; 22</code> <code>i = 4</code></li><li><code>31, 44 &gt; 22</code>（跳过） <code>15 &lt; 22</code> <code>j = 6</code></li><li><code>swap(4, 6)</code> <code>[22, 2, 18, 21, 15, 9, 33, 44, 31]</code></li><li><code>15, 9 &lt; 22</code> 跳过，<code>i = 6</code> <code>j = 6</code> 跳出循环</li><li><code>arr[6] = 33 &gt; 22</code> <code>j--</code> <code>swap(0, 5)</code> <code>[9, 2, 18, 21, 15, 22, 33, 44, 31]</code> 返回 <code>j = 5</code></li></ol></li><li><code>QuickSort(arr, 0, 4)</code> 和 <code>QuickSort(arr, 6, 8)</code></li><li><code>QuickSort(arr, 0, 4)</code> &#x3D;&gt; <code>partition(arr, 0, 4)</code> <code>[9, 2, 18, 21, 15]</code> <code>pivot = 9, i = 1, j = 4</code><ol><li><code>2 &lt; 9</code> （跳过） <code>18 &gt; 9</code> <code>i = 2</code></li><li><code>15, 21, 18 &gt; 9</code> （跳过） <code>j = 2</code> 跳出循环</li><li><code>arr[j] = 18 &gt; 9</code> <code>j--</code> <code>swap(0, 1)</code> <code>[2, 9, 18, 21, 15]</code> 返回 <code>j = 1</code></li></ol></li><li><code>QuickSort(arr, 0, 0)</code>（跳过） 和 <code>QuickSort(arr, 2, 4)</code></li><li><code>QuickSort(arr, 2, 4)</code> &#x3D;&gt; <code>partition(arr, 2, 4)</code> <code>[18, 21, 15]</code> <code>pivot = 18, i = 3, j = 4</code><ol><li><code>21 &gt; 18</code> <code>i = 3</code></li><li><code>15 &lt; 18</code> <code>j = 4</code></li><li><code>swap(3, 4)</code> <code>[18, 15, 21]</code> <code>j = 4</code> 跳出循环</li><li><code>arr[4] = 21 &gt; 18</code> <code>j--</code> <code>swap(2, 3)</code> <code>[15, 18, 21]</code> 返回 <code>j = 3</code></li></ol></li><li><code>QuickSort(arr, 2, 2)</code>（跳过） 和 <code>QuickSort(arr, 4, 4)</code>（跳过）</li><li>回到 <code>QuickSort(arr, 6, 8)</code> &#x3D;&gt; <code>partition(arr, 6, 8)</code> <code>[33, 44, 31]</code> <code>pivot = 33, i = 7, j = 8</code><ol><li><code>44 &gt; 33</code> <code>i = 7</code></li><li><code>31 &lt; 33</code> <code>j = 8</code></li><li><code>swap(7, 8)</code> <code>[33, 31, 44]</code> <code>j = 8</code> 跳出循环</li><li><code>arr[8] &gt; 33</code> <code>j--</code> <code>swap(6, 7)</code> <code>[31, 33, 44]</code> 返回 <code>j = 7</code></li></ol></li><li><code>QuickSort(arr, 6, 6)</code>（跳过） 和 <code>QuickSort(arr, 8, 8)</code>（跳过）</li><li>返回数组 <code>[2, 9, 15, 18, 21, 22, 31, 33, 44]</code> 完成排序</li></ol><h2 id="三种方式对比"><a href="#三种方式对比" class="headerlink" title="三种方式对比"></a>三种方式对比</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b05a51f75eb4f16894154363544b07f~tplv-k3u1fbpfcp-watermark.image" alt="GIF.gif"></p><h2 id="优化角度"><a href="#优化角度" class="headerlink" title="优化角度"></a>优化角度</h2><p>分析上面三个版本的实现，我们可以发现，在随机化越高的情况下，快速排序所用的轮次会越少，所以一般我们可以通过打乱数组后进行排序，效率更高</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">swap</span> = (<span class="params">arr, i, j</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> temp = arr[i]</span><br><span class="line">  arr[i] = arr[j]</span><br><span class="line">  arr[j] = temp</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">randOne</span> = (<span class="params">n, m</span>) =&gt; n + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (m - n + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">shuffle</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> n = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> rand = <span class="title function_">randOne</span>(i, n - <span class="number">1</span>)</span><br><span class="line">    <span class="title function_">swap</span>(arr, i, rand)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sortArray = <span class="keyword">function</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="comment">// 排序前先打乱其顺序</span></span><br><span class="line">  <span class="title function_">shuffle</span>(arr)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">QuickSort</span>(arr, <span class="number">0</span>, arr.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sortArray = <span class="keyword">function</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="title function_">shuffle</span>(arr)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">QuickSort</span>(arr, <span class="number">0</span>, arr.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">QuickSort</span> = (<span class="params">arr, p, q</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(p &gt;= q) <span class="keyword">return</span> arr</span><br><span class="line">  <span class="keyword">let</span> m = <span class="title function_">partition</span>(arr, p, q)</span><br><span class="line">  <span class="title class_">QuickSort</span>(arr, p, m - <span class="number">1</span>)</span><br><span class="line">  <span class="title class_">QuickSort</span>(arr, m + <span class="number">1</span>, q)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">partition</span> = (<span class="params">arr, p, q</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> x = arr[p]</span><br><span class="line">  <span class="keyword">let</span> i = p + <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> j = q</span><br><span class="line">  <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= x) i++</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= x) j--</span><br><span class="line">    <span class="title function_">swap</span>(arr, i, j)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(arr[j] &gt;= x) j--</span><br><span class="line">  <span class="title function_">swap</span>(arr, p, j)</span><br><span class="line">  <span class="keyword">return</span> j</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">swap</span> = (<span class="params">arr, i, j</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> temp = arr[i]</span><br><span class="line">  arr[i] = arr[j]</span><br><span class="line">  arr[j] = temp</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">randOne</span> = (<span class="params">n, m</span>) =&gt; n + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (m - n + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">shuffle</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> n = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> rand = <span class="title function_">randOne</span>(i, n - <span class="number">1</span>)</span><br><span class="line">    <span class="title function_">swap</span>(arr, i, rand)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再补一个三路快排"><a href="#再补一个三路快排" class="headerlink" title="再补一个三路快排"></a>再补一个三路快排</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3路快排 [l,...lt, .. i, ... gt, r]</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">QuickSort</span> = (<span class="params">arr, l, r</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> arr</span><br><span class="line">  <span class="keyword">let</span> x = arr[l]</span><br><span class="line">  <span class="keyword">let</span> lt = l</span><br><span class="line">  <span class="keyword">let</span> gt = r + <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> i = l + <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(i &lt; gt)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &lt; x)&#123;</span><br><span class="line">      <span class="title function_">swap</span>(arr, i, lt + <span class="number">1</span>)</span><br><span class="line">      lt++</span><br><span class="line">      i++</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[i] &gt; x)&#123;</span><br><span class="line">      <span class="title function_">swap</span>(arr, i, gt - <span class="number">1</span>)</span><br><span class="line">      gt--</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">swap</span>(arr, lt, l)</span><br><span class="line">  <span class="title class_">QuickSort</span>(arr, l, lt -<span class="number">1</span>)</span><br><span class="line">  <span class="title class_">QuickSort</span>(arr, gt, r)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th><th>排序方式</th><th>稳定性</th></tr></thead><tbody><tr><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n^2)</td><td>O(n)</td><td>in-place</td><td>不稳定</td></tr></tbody></table><p><a href="https://github.com/Luoyuda/js-demo/tree/master/algorithm/Sort/QuickSort">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h1&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="算法" scheme="https://luoyuda.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="https://luoyuda.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    <category term="快排" scheme="https://luoyuda.github.io/tags/%E5%BF%AB%E6%8E%92/"/>
    
  </entry>
  
  <entry>
    <title>排序算法 - 希尔排序 （JavaScript实现）</title>
    <link href="https://luoyuda.github.io/2022/04/07/Sort/shell/"/>
    <id>https://luoyuda.github.io/2022/04/07/Sort/shell/</id>
    <published>2022-04-07T09:35:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><p>本质上是对插入排序的一种优化，它利用了插入排序的简单，又克服了插入排序每次只交换相邻两个元素的缺点。</p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><p>通过每一轮的调控，让整个数组有序</p><ul><li>外层是一个调控增量的循环，<code>gap &gt;&gt;= 1</code> 意味着 <code>gap</code> 每次都缩小一半，相当于除 2</li><li>内部是一个插入排序</li><li>划分 <code>gap</code> 之后，可以看作是 <code>[0, ... i - gap, i]</code> 的一组数组进行插入排序</li><li>随着 <code>gap</code> 的逐渐缩小，最后一轮为 <code>gap = 1</code> 的插入排序时，数组已经实际上基本有序，使用插入排序会得到最高的效率</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">ShellSort</span> = arr =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> n = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> gap = n &gt;&gt; <span class="number">1</span>; gap &gt; <span class="number">0</span>; gap &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = gap; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> x = arr[i]</span><br><span class="line">      <span class="keyword">let</span> j = i - gap</span><br><span class="line">      <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; x &lt; arr[j])&#123;</span><br><span class="line">        arr[j + gap] = arr[j]</span><br><span class="line">        j -= gap</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j + gap] = x</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考动图可以理解的比较直观</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc39e63e4e4242869fea7cf187339f2e~tplv-k3u1fbpfcp-watermark.image" alt="GIF.gif"></p><h2 id="优化角度"><a href="#优化角度" class="headerlink" title="优化角度"></a>优化角度</h2><p>由上可知，增量序列的选择时决定希尔排序效率的关键，如果增量序列每次都无法调整位置，会堆积到最后一趟为 1 的时候大量移动</p><blockquote><p>增量元素不互质，则小增量可能根本不起作用</p></blockquote><h3 id="Knuth-增量序列实现"><a href="#Knuth-增量序列实现" class="headerlink" title="Knuth 增量序列实现"></a>Knuth 增量序列实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">ShellSort</span> = arr =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> n = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">let</span> maxGap = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (maxGap &lt;= n / <span class="number">3</span>) &#123;</span><br><span class="line">      maxGap = maxGap * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> gap = maxGap; gap &gt; <span class="number">0</span>; gap = (gap - <span class="number">1</span>) / <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = gap; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> x = arr[i]</span><br><span class="line">      <span class="keyword">let</span> j = i - gap</span><br><span class="line">      <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; x &lt; arr[j])&#123;</span><br><span class="line">        arr[j + gap] = arr[j]</span><br><span class="line">        j -= gap</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j + gap] = x</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29be25baccb8412487e269834ef95942~tplv-k3u1fbpfcp-watermark.image" alt="GIF.gif"></p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dbf904474ad947aca0ea8b686e73129d~tplv-k3u1fbpfcp-watermark.image" alt="GIF.gif"></p><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th><th>排序方式</th><th>稳定性</th></tr></thead><tbody><tr><td>O(nlog n)</td><td>O(nlog2 n)</td><td>O(nlog2 n)</td><td>O(1)</td><td>in-place</td><td>不稳定</td></tr></tbody></table><p><a href="https://github.com/Luoyuda/js-demo/tree/master/algorithm/Sort/ShellSort">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;希尔排序&quot;&gt;&lt;a href=&quot;#希尔排序&quot; class=&quot;headerlink&quot; title=&quot;希尔排序&quot;&gt;&lt;/a&gt;希尔排序&lt;/h1&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="算法" scheme="https://luoyuda.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="https://luoyuda.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    <category term="希尔" scheme="https://luoyuda.github.io/tags/%E5%B8%8C%E5%B0%94/"/>
    
  </entry>
  
  <entry>
    <title>排序算法 - 插入排序 （JavaScript实现）</title>
    <link href="https://luoyuda.github.io/2022/04/07/Sort/Insert/"/>
    <id>https://luoyuda.github.io/2022/04/07/Sort/Insert/</id>
    <published>2022-04-07T06:35:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>把要排序的数组分为了两个部分, 一部分是数组的全部元素(除去待插入的元素), 另一部分是待插入的元素; 先将第一部分排序完成, 然后再插入这个元素. 其中第一部分的排序也是通过再次拆分为两部分来进行的.</p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><h3 id="交换法"><a href="#交换法" class="headerlink" title="交换法"></a>交换法</h3><ul><li>第一个元素开始，我们可以认为该元素已经被排序</li><li>取出 <code>i</code> 元素，在 <code>(0, i)</code> 的区间扫描 假设从 <code>j = i</code> 位置开始往前挪</li><li>如果 <code>arr[j - 1] &gt; arr[j]</code>，则需要将 <code>arr[j]</code> 与 <code>arr[j - 1]</code> 交换</li><li>重复直到不满足条件 <code>j &gt;= 1 &amp;&amp; arr[j - 1] &gt; arr[j]</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">InsertSort</span> = <span class="keyword">function</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = i</span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">1</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; arr[j])&#123;</span><br><span class="line">      <span class="title function_">swap</span>(arr, j, j - <span class="number">1</span>)</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/96c5608434e54647ac9701a654ae6d64~tplv-k3u1fbpfcp-watermark.image" alt="insert.gif"></p><h3 id="一次插入法"><a href="#一次插入法" class="headerlink" title="一次插入法"></a>一次插入法</h3><ul><li>取出第一个元素，默认其有序</li><li>从 <code>i = 1</code> 开始遍历，取出 <code>x = arr[i]</code> 往前查找适合的位置后进行插入</li><li>比 <code>x</code> 小的值往后移动一位</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">InsertSort</span> = <span class="keyword">function</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = arr[i]</span><br><span class="line">    <span class="keyword">let</span> j = i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; x)&#123;</span><br><span class="line">      arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j + <span class="number">1</span>] = x</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/652ed4da44bd4364956245aba3c7fb6a~tplv-k3u1fbpfcp-watermark.image" alt="insert.gif"></p><h2 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h2><p>折半插入排序是直接插入排序的升级版. 鉴于插入排序第一部分为已排好序的数组, 我们不必按顺序依次寻找插入点, 只需比较它们的中间值与待插入元素的大小即可。</p><p>折半插入明显的减少了查询的次数，但是数组移动的次数并没有改变，所以时间复杂度还是跟插入排序一致</p><h3 id="编码实现-1"><a href="#编码实现-1" class="headerlink" title="编码实现"></a>编码实现</h3><ul><li>第一个元素开始，我们可以认为该元素已经被排序</li><li>取出 <code>x = arr[i]</code> 元素，在 <code>(l, r)</code> 的区间中 取出中间 的下标 <code>m</code> </li><li>直到 <code>arr[m] &gt;= x</code> 则将 <code>l</code> 位置往后挪 1 位，反之则将 <code>r</code> 往前挪 1 位 直到 <code>l &lt;= r</code> 时跳出</li><li>接下来就需要在 将 <code>(l, i)</code> 中的元素一起往后挪 1 位， 最后在 <code>l</code> 位置插入 <code>x</code></li><li>重复直到外循环结束</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">InsertSort</span> = <span class="keyword">function</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> n = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = arr[i]</span><br><span class="line">    <span class="keyword">let</span> l = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> r = i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">      <span class="comment">// 二分查找</span></span><br><span class="line">      <span class="keyword">let</span> m = l + <span class="title class_">Math</span>.<span class="title function_">floor</span>((r - l) / <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">if</span>(x &gt;= arr[m])&#123;</span><br><span class="line">        l = m + <span class="number">1</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        r = m - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 确定好插入位置后，元素集体往后挪一位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; l; j--) &#123;</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入元素</span></span><br><span class="line">    arr[l] = x</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18731aa1c77d4edeac08180d85b0ab46~tplv-k3u1fbpfcp-watermark.image" alt="insert.gif"></p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0e16549d7ca4367a3847fda30041ebf~tplv-k3u1fbpfcp-watermark.image" alt="insert.gif"></p><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th><th>排序方式</th><th>稳定性</th></tr></thead><tbody><tr><td>O(n²)</td><td>O(n)</td><td>O(n²)</td><td>O(1)</td><td>in-place</td><td>稳定</td></tr><tr><td>无</td><td>输入数组按升序排列</td><td>输入数组按降序排列</td><td></td><td></td><td></td></tr></tbody></table><p><a href="https://github.com/Luoyuda/js-demo/tree/master/algorithm/Sort/InsertSort">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h1&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="算法" scheme="https://luoyuda.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="https://luoyuda.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    <category term="插入" scheme="https://luoyuda.github.io/tags/%E6%8F%92%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>排序算法 - 归并排序 （JavaScript实现）</title>
    <link href="https://luoyuda.github.io/2022/04/07/Sort/merge/"/>
    <id>https://luoyuda.github.io/2022/04/07/Sort/merge/</id>
    <published>2022-04-07T06:35:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>将一个数组分割成 <code>N</code> 个小数组，然后将小数组逐一合并成一个个有序的数组，是分治法的应用</p><ul><li>分割：递归对半分割数组</li><li>合并：保持元素顺序的同时，将上一步得到的子集合并到一起</li></ul><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><ul><li>将数组递归分割，直到只剩下一个元素</li><li>逐渐合并两个有序的数组<ul><li><code>[6] [10]</code> &#x3D;&gt; <code>[6, 10][13]</code> &#x3D;&gt; <code>[6, 10, 13]</code></li></ul></li><li>将最后输出的数组结果同步到原数组中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MergeSort</span> = <span class="keyword">function</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!arr.<span class="property">length</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">mergeSort</span>(arr, <span class="number">0</span> , arr.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    arr[i] = result[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分分割数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[Number]</span>&#125; arr </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; start </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; end </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeSort = <span class="keyword">function</span>(<span class="params">arr, start, end</span>)&#123;</span><br><span class="line">  <span class="comment">// 只剩下一个数字，停止拆分</span></span><br><span class="line">  <span class="keyword">if</span>(start == end) <span class="keyword">return</span> [arr[start]]</span><br><span class="line">  <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> left = <span class="title function_">mergeSort</span>(arr, start, mid)</span><br><span class="line">  <span class="keyword">let</span> right = <span class="title function_">mergeSort</span>(arr, mid + <span class="number">1</span>, end)</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(left, right)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并两个有序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[Number]</span>&#125; arr1 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[Number]</span>&#125; arr2 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="keyword">function</span>(<span class="params">arr1, arr2</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="title class_">Array</span>(arr1.<span class="property">length</span> + arr2.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; arr1.<span class="property">length</span> &amp;&amp; j &lt; arr2.<span class="property">length</span>)&#123;</span><br><span class="line">    result[i + j] = arr1[i] &lt; arr2[j] ? arr1[i++] : arr2[j++]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; arr1.<span class="property">length</span>)&#123;</span><br><span class="line">    result[i + j] = arr1[i++]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(j &lt; arr2.<span class="property">length</span>)&#123;</span><br><span class="line">    result[i + j] = arr2[j++]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c438b8eff04445d192a8fe38df05a6fb~tplv-k3u1fbpfcp-watermark.image" alt="GIF.gif"></p><h2 id="优化角度"><a href="#优化角度" class="headerlink" title="优化角度"></a>优化角度</h2><h3 id="优化空间使用"><a href="#优化空间使用" class="headerlink" title="优化空间使用"></a>优化空间使用</h3><p>只使用一个数组去承载计算的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; arr 待排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MergeSort</span> = <span class="keyword">function</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!arr.<span class="property">length</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="title class_">Array</span>(arr.<span class="property">length</span>)</span><br><span class="line">  <span class="title function_">mergeSort</span>(arr, <span class="number">0</span> , arr.<span class="property">length</span> - <span class="number">1</span>, result)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mergeSort = <span class="keyword">function</span>(<span class="params">arr, start, end, result</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(start == end) <span class="keyword">return</span> </span><br><span class="line">  <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>)</span><br><span class="line">  <span class="title function_">mergeSort</span>(arr, start, mid, result)</span><br><span class="line">  <span class="title function_">mergeSort</span>(arr, mid + <span class="number">1</span>, end, result)</span><br><span class="line">  <span class="title function_">merge</span>(arr, start, end, result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> merge = <span class="keyword">function</span>(<span class="params">arr, start, end, result</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> end1 = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> start2 = end1 + <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> end2 = end</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> index1 = start</span><br><span class="line">  <span class="keyword">let</span> index2 = start2</span><br><span class="line">  <span class="keyword">while</span>(index1 &lt;= end1 &amp;&amp; index2 &lt;= end2) &#123;</span><br><span class="line">    result[index1 + index2 - start2] = arr[index1] &lt;= arr[index2] ? arr[index1++] : arr[index2++]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(index1 &lt;= end1)&#123;</span><br><span class="line">    result[index1 + index2 - start2] = arr[index1++]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(index2 &lt;= end2)&#123;</span><br><span class="line">    result[index1 + index2 - start2] = arr[index2++]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">    arr[start] = result[start++]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th><th>排序方式</th><th>稳定性</th></tr></thead><tbody><tr><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n)</td><td>out-place</td><td>稳定</td></tr></tbody></table><p><a href="https://github.com/Luoyuda/js-demo/tree/master/algorithm/Sort/MergeSort">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h1&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="算法" scheme="https://luoyuda.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="https://luoyuda.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    <category term="归并" scheme="https://luoyuda.github.io/tags/%E5%BD%92%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>排序算法 - 选择排序 （JavaScript实现）</title>
    <link href="https://luoyuda.github.io/2022/04/07/Sort/select/"/>
    <id>https://luoyuda.github.io/2022/04/07/Sort/select/</id>
    <published>2022-04-07T06:35:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>选择排序(Selection-sort)是一种简单直观的排序算法。</p><p>它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><ul><li>遍历数组，假设第一个为最小值 <code>min = i</code></li><li>遍历 <code>(i, n)</code> 找到最小值的下标 <code>min</code>，最后与 <code>i</code> 进行交换</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">SelectSort</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> n = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> min = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &lt; arr[min]) &#123;</span><br><span class="line">        min = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">swap</span>(arr, i, min)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/777f546043054de2b2cfa7e21fba2aad~tplv-k3u1fbpfcp-watermark.image" alt="select.gif"></p><h2 id="优化角度"><a href="#优化角度" class="headerlink" title="优化角度"></a>优化角度</h2><h3 id="同时找最小和最大元素"><a href="#同时找最小和最大元素" class="headerlink" title="同时找最小和最大元素"></a>同时找最小和最大元素</h3><p>双重循环遍历数组，每经过一轮比较，找到最小元素的下标，将其交换至首位。找到最大的坐标放在最后一位</p><ul><li>遍历数组，找出最大值 <code>max</code> 和最小值 <code>min</code></li><li>交换 <code>min</code> 与 <code>i</code> </li><li>判断 <code>i</code> 是否为 <code>max</code>，如果刚好为 <code>i</code> 则由于 <code>i</code> 已经被交换过，<code>max</code> 的值应该是跟 <code>i</code> 交换过后的 <code>min</code> </li><li>交换 <code>max</code> 和 <code>n - i - 1</code> (尾部)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">SelectSort</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> n = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n &gt;&gt; <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> min = i</span><br><span class="line">    <span class="keyword">let</span> max = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; n - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &lt; arr[min]) &#123;</span><br><span class="line">        min = j</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &gt; arr[max]) &#123;</span><br><span class="line">        max = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arr[min] == arr[max]) <span class="keyword">break</span></span><br><span class="line">    <span class="title function_">swap</span>(arr, i, min)</span><br><span class="line">    <span class="comment">// 如果最大值的下标刚好是 i，</span></span><br><span class="line">    <span class="comment">// 由于 arr[i] 和 arr[min] 已经交换了，所以这里要更新 max 的值。</span></span><br><span class="line">    <span class="keyword">if</span>(i == max) max = min</span><br><span class="line">    <span class="title function_">swap</span>(arr, max, n - i - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f95a11a2be244019eef61fd975f530d~tplv-k3u1fbpfcp-watermark.image" alt="select.gif"></p><h2 id="算法复杂度-稳如狗的时间复杂度"><a href="#算法复杂度-稳如狗的时间复杂度" class="headerlink" title="算法复杂度 (稳如狗的时间复杂度)"></a>算法复杂度 (稳如狗的时间复杂度)</h2><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th><th>排序方式</th><th>稳定性</th></tr></thead><tbody><tr><td>O(n²)</td><td>O(n²)</td><td>O(n²)</td><td>O(1)</td><td>in-place</td><td>不稳定</td></tr></tbody></table><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d687e051f88647c0a1c04f8296446252~tplv-k3u1fbpfcp-watermark.image" alt="select.gif"></p><h2 id="跟插入、冒泡相比"><a href="#跟插入、冒泡相比" class="headerlink" title="跟插入、冒泡相比"></a>跟插入、冒泡相比</h2><p>从图中不难看出，这个排序方法确实很辣鸡啊，无论正序，逆序，随机各种情况下都是很稳定的久（令人泪目）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1bd076a99874128b3164c76cc38d073~tplv-k3u1fbpfcp-watermark.image" alt="对比.gif"></p><p><a href="https://www.toptal.com/developers/sorting-algorithms">网站地址</a></p><p><a href="https://github.com/Luoyuda/js-demo/tree/master/algorithm/Sort/SelectSort">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h1&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="算法" scheme="https://luoyuda.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="https://luoyuda.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    <category term="选择" scheme="https://luoyuda.github.io/tags/%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>排序算法 - 冒泡排序 （JavaScript实现）</title>
    <link href="https://luoyuda.github.io/2022/04/07/Sort/bubble/"/>
    <id>https://luoyuda.github.io/2022/04/07/Sort/bubble/</id>
    <published>2022-04-07T03:35:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>冒泡排序是一种简单的排序算法。 它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。 </p><p>走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><p>简单来说，冒泡排序就是通过比较相邻元素，交换两个元素位置针对所有的元素作同样的工作之后，排序就完成了</p><ul><li>首先用一个外循环来循环数组的所有元素</li><li>然后将当前循环到的元素与其他元素比较换位</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">i,j,arr</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> temp = arr[j]</span><br><span class="line">  arr[j] = arr[i]</span><br><span class="line">  arr[i] = temp</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">bubbleSort</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> n = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//外循环 看目前排了几个有序的元素</span></span><br><span class="line">    <span class="keyword">let</span> position = n - <span class="number">1</span> - i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; position; j++) &#123;</span><br><span class="line">      <span class="comment">// 内循环比较其他元素</span></span><br><span class="line">      <span class="comment">// 每次走完这个循环之后，就会有一个元素被冒到  position 的位置</span></span><br><span class="line">      <span class="comment">// (position, n) 有序的区间</span></span><br><span class="line">      <span class="comment">// 而我们要接着走的是 (0, position) 这个无序的区间</span></span><br><span class="line">      <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">        <span class="title function_">swap</span>(arr, j, j + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    当然也可以这样写</span></span><br><span class="line"><span class="comment">    let j = 0</span></span><br><span class="line"><span class="comment">    while (j &lt; position) &#123;</span></span><br><span class="line"><span class="comment">      if(arr[j] &gt; arr[j + 1])&#123;</span></span><br><span class="line"><span class="comment">        swap(arr, j, j + 1)</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      j++</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th><th>排序方式</th><th>稳定性</th></tr></thead><tbody><tr><td>O(n²)</td><td>O(n)</td><td>O(n²)</td><td>O(1)</td><td>in-place</td><td>稳定</td></tr><tr><td>无</td><td>当输入的数据已经是正序时</td><td>当输入的数据是反序时</td><td></td><td></td><td></td></tr></tbody></table><h3 id="优化角度"><a href="#优化角度" class="headerlink" title="优化角度"></a>优化角度</h3><h4 id="某一趟未交换时可提前退出"><a href="#某一趟未交换时可提前退出" class="headerlink" title="某一趟未交换时可提前退出"></a>某一趟未交换时可提前退出</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">bubbleSort</span> = arr =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> n = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">let</span> swapped = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!swapped) <span class="keyword">break</span></span><br><span class="line">    swapped = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">        <span class="title function_">swap</span>(arr, j, j + <span class="number">1</span>)</span><br><span class="line">        swapped = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="记录最后一次交换位置"><a href="#记录最后一次交换位置" class="headerlink" title="记录最后一次交换位置"></a>记录最后一次交换位置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">bubbleSort</span> = arr =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> lastIndex = arr.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> swapped = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">let</span> swappedIndex = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (swapped)&#123;</span><br><span class="line">    swapped = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lastIndex; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i] &gt; arr[i + <span class="number">1</span>])&#123;</span><br><span class="line">        <span class="title function_">swap</span>(arr, i, i + <span class="number">1</span>)</span><br><span class="line">        swapped = <span class="literal">true</span></span><br><span class="line">        swappedIndex = i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    lastIndex = swappedIndex</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双向冒泡排序"><a href="#双向冒泡排序" class="headerlink" title="双向冒泡排序"></a>双向冒泡排序</h4><h5 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h5><p>双向冒泡排序是冒泡排序的一个简易升级版，其原理是从两个方向分别排序，第一轮找出最大的放在后面，第二轮找出最小的放在前面，通过逐渐缩短查找范围的方式，因此性能会比冒泡排序好一点</p><h5 id="编码实现-1"><a href="#编码实现-1" class="headerlink" title="编码实现"></a>编码实现</h5><p>首先它既然是从两个方向查找的，我们需要定义前后两个下标变量，方便我们来定位当前的查找区间，并且在每一次查找之后需要缩短查找的范围</p><p>* </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">bubbleSort</span> = arr =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> low = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> high = arr.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> pos, i</span><br><span class="line">  <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="comment">//当 low &gt;= high 的时候，双向的区间都已经有序，则跳出循环 </span></span><br><span class="line">    i = low</span><br><span class="line">    <span class="keyword">while</span> (i &lt; high) &#123;</span><br><span class="line">      <span class="comment">//第一轮 从(low, high) 区间开始 查找最大的放在 high 位</span></span><br><span class="line">      <span class="keyword">if</span>(arr[i] &gt; arr[i + <span class="number">1</span>])&#123;</span><br><span class="line">        <span class="title function_">swap</span>(arr, i, i + <span class="number">1</span>)</span><br><span class="line">        pos = i</span><br><span class="line">      &#125;</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一轮 从(low, pos) 区间开始</span></span><br><span class="line">    i = high = pos</span><br><span class="line">    <span class="keyword">while</span> (i &gt; low) &#123;</span><br><span class="line">      <span class="comment">//第二轮 从(low, pos) 区间开始 查找最大的放在 low 位</span></span><br><span class="line">      <span class="keyword">if</span>(arr[i] &lt; arr[i - <span class="number">1</span>])&#123;</span><br><span class="line">        <span class="title function_">swap</span>(arr, i, i - <span class="number">1</span>)</span><br><span class="line">        pos = i</span><br><span class="line">      &#125;</span><br><span class="line">      i--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// low逐渐变大 high逐渐变小</span></span><br><span class="line">    low = pos</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对比图"><a href="#对比图" class="headerlink" title="对比图"></a>对比图</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35304d4c250e459b8e37128ecbf67da9~tplv-k3u1fbpfcp-watermark.image" alt="bubble.gif"></p><p><a href="https://github.com/Luoyuda/js-demo/tree/master/algorithm/Sort/BubbleSort">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="算法" scheme="https://luoyuda.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="https://luoyuda.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    <category term="冒泡" scheme="https://luoyuda.github.io/tags/%E5%86%92%E6%B3%A1/"/>
    
  </entry>
  
  <entry>
    <title>深浅拷贝实现（JavaScript）</title>
    <link href="https://luoyuda.github.io/2022/04/05/JavaScript/clone/"/>
    <id>https://luoyuda.github.io/2022/04/05/JavaScript/clone/</id>
    <published>2022-04-05T06:00:00.000Z</published>
    <updated>2022-04-15T06:06:33.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>在了解深、浅拷贝之前，得先了解 <code>JavaScript</code> 中的数据类型和存储方式</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e15d0afc7d764954a40f70881f1e21fb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li><p>基本类型：<code>number</code>、<code>string</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code>、<code>symbol</code></p><ul><li>存储在栈内存中</li><li>大小固定、体积轻量、相对简单</li><li>赋值操作会直接生成一个新的值（深拷贝）</li></ul></li><li><p>引用类型：<code>object</code>、<code>array</code>、<code>function</code>等</p><ul><li>栈存储该对象的引用地址，实际数据存放在堆内存</li><li>大小不定、占用空间较大、比较复杂</li><li>赋值操作会直接将指针指向该实体的引用地址（处于节省内存考虑，属于浅拷贝）</li></ul></li></ul><h1 id="深浅拷贝定义"><a href="#深浅拷贝定义" class="headerlink" title="深浅拷贝定义"></a>深浅拷贝定义</h1><blockquote><p>浅拷贝：复制某个对象的指针地址，而不是复制对象本身，新旧对象依然共享一块内存</p></blockquote><blockquote><p>深拷贝：创造一个一模一样的对象，新对象与原对象不共享内存，修改新对象不影响到原对象</p></blockquote><h1 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h1><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cloneArrayBySlice</span>(<span class="params">list</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">slice</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;xy&#x27;</span> &#125;]</span><br><span class="line"><span class="keyword">var</span> arrClone = <span class="title function_">cloneArrayBySlice</span>(arr)</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line">arrClone[<span class="number">0</span>] = <span class="number">3</span></span><br><span class="line">arrClone[<span class="number">2</span>].<span class="property">name</span> = <span class="string">&#x27;change&#x27;</span> <span class="comment">// 引用类型是浅拷贝地址</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arrClone) <span class="comment">// [ 2, 2, &#123; name: &#x27;change&#x27; &#125; ] [ 3, 2, &#123; name: &#x27;change&#x27; &#125; ]</span></span><br></pre></td></tr></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cloneArrayByConcat</span>(<span class="params">list</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> [].<span class="title function_">concat</span>(list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spread"><a href="#spread" class="headerlink" title="spread"></a>spread</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cloneArrayBySpread</span>(<span class="params">list</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> [...list]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h2 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h2><p>值得注意的是 <code>assign</code> 接受第一个入参为 <code>target</code> 后续的参数为混入到 <code>target</code> 上，所以也算一种浅拷贝吧（勉强）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">assign</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><h2 id="assign-1"><a href="#assign-1" class="headerlink" title="assign"></a>assign</h2><p>为什么这里还能出现在这个？</p><blockquote><p><code>Object.assign</code> 方法只会拷贝源对象自身的并且可枚举的属性到目标对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, a) <span class="comment">// 此时是将 a 混入到 &#123;&#125; 对象上，所以 a != b</span></span><br></pre></td></tr></table></figure><p>当然它只要超过值是引用类型还是执行浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; b : <span class="number">2</span> &#125; &#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, a)</span><br><span class="line">a.<span class="property">b</span> === b.<span class="property">b</span></span><br></pre></td></tr></table></figure><h2 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h2><p>这个方法的原理是将对象序列化成字符串，再解析 <code>json</code> 字符串解析为对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点</p><ul><li>忽略 <code>symbol</code> <code>undefined</code> <code>function</code> 类型</li><li>不支持循环引用对象的拷贝</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d89327d55304e658162ebf1c104aef7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="MessageChannel"><a href="#MessageChannel" class="headerlink" title="MessageChannel"></a>MessageChannel</h2><p>Channel Messaging API的 <code>MessageChannel</code> 接口允许我们创建一个新的消息通道，并通过它的两个<code>MessagePort</code> 属性发送数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; port1, port2 &#125; = <span class="keyword">new</span> <span class="title class_">MessageChannel</span>()</span><br><span class="line">port1.<span class="property">onmessage</span> = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>)</span><br><span class="line">port2.<span class="title function_">postMessage</span>(<span class="string">&#x27;hello from port2&#x27;</span>) <span class="comment">// hello from port2</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; port1, port2 &#125; = <span class="keyword">new</span> <span class="title class_">MessageChannel</span>()</span><br><span class="line">    port1.<span class="property">onmessage</span> = <span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">res</span>(e.<span class="property">data</span>)</span><br><span class="line">    port2.<span class="title function_">postMessage</span>(obj)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点</p><ul><li>异步取值</li><li>不支持 <code>function</code> 和 <code>symbol</code> 类型</li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5cce0e33e10404a9d17f88cb945ffbc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/49270fa5681e459d8a2881c955bd2e84~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h2><p>使用递归去创建对象，再赋值，可以处理大部分场景</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!obj) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">var</span> target = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">      target[key] = <span class="title function_">clone</span>(obj[key])</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      target[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点</p><ul><li>不支持循环引用</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98299d06d2174522a25e1b4fbafae5b9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="处理循环引用的解决方案"><a href="#处理循环引用的解决方案" class="headerlink" title="处理循环引用的解决方案"></a>处理循环引用的解决方案</h2><p>使用 <code>WeakMap</code> 数据结构存储循环引用的映射关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">_clone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> val = map.<span class="title function_">get</span>(obj)</span><br><span class="line">    <span class="keyword">if</span>(val) <span class="keyword">return</span> val</span><br><span class="line">    <span class="keyword">var</span> target = obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;</span><br><span class="line">    map.<span class="title function_">set</span>(obj, target)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj, key)) &#123;</span><br><span class="line">        <span class="keyword">const</span> el = obj[key];</span><br><span class="line">        <span class="keyword">if</span>(el &amp;&amp; <span class="keyword">typeof</span> el === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          target[key] = <span class="title function_">_clone</span>(el)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          target[key] = el</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_clone</span>(obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; clone &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./clone.js&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">runTests</span> = (<span class="params">tests, message</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">describe</span>(message, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    tests.<span class="title function_">forEach</span>(<span class="function">(<span class="params">[args, res], i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">test</span>(<span class="string">`<span class="subst">$&#123;i&#125;</span>`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">expect</span>(<span class="title function_">clone</span>(args)).<span class="title function_">toEqual</span>(args)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Tests</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">tests</span>: [</span><br><span class="line">      [</span><br><span class="line">        (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> a = &#123; </span><br><span class="line">            <span class="attr">a</span>: <span class="number">1</span>, </span><br><span class="line">            <span class="attr">b</span>: <span class="string">&#x27;1&#x27;</span>, </span><br><span class="line">            <span class="attr">c</span>: <span class="literal">true</span>, </span><br><span class="line">            <span class="attr">d</span>: <span class="literal">false</span>, </span><br><span class="line">            <span class="attr">e</span>: <span class="literal">null</span>, </span><br><span class="line">            <span class="attr">f</span>: <span class="literal">undefined</span>, </span><br><span class="line">            <span class="attr">g</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">            <span class="attr">h</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;b&#x27;</span>),</span><br><span class="line">            <span class="attr">i</span>: [</span><br><span class="line">              <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, </span><br><span class="line">              &#123; </span><br><span class="line">                <span class="attr">a</span>: <span class="number">1</span>, </span><br><span class="line">                <span class="attr">b</span>: <span class="string">&#x27;1&#x27;</span>, </span><br><span class="line">                <span class="attr">c</span>: <span class="literal">true</span>, </span><br><span class="line">                <span class="attr">d</span>: <span class="literal">false</span>, </span><br><span class="line">                <span class="attr">e</span>: <span class="literal">null</span>, </span><br><span class="line">                <span class="attr">f</span>: <span class="literal">undefined</span>, </span><br><span class="line">                <span class="attr">g</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">                <span class="attr">h</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;b&#x27;</span>),</span><br><span class="line">              &#125;,</span><br><span class="line">              [<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;]</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">j</span>: &#123; </span><br><span class="line">              <span class="attr">a</span>: <span class="number">1</span>, </span><br><span class="line">              <span class="attr">b</span>: <span class="string">&#x27;1&#x27;</span>, </span><br><span class="line">              <span class="attr">c</span>: <span class="literal">true</span>, </span><br><span class="line">              <span class="attr">d</span>: <span class="literal">false</span>, </span><br><span class="line">              <span class="attr">e</span>: <span class="literal">null</span>, </span><br><span class="line">              <span class="attr">f</span>: <span class="literal">undefined</span>, </span><br><span class="line">              <span class="attr">g</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">              <span class="attr">h</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;b&#x27;</span>),</span><br><span class="line">              <span class="attr">i</span>: [</span><br><span class="line">                <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, </span><br><span class="line">                &#123; </span><br><span class="line">                  <span class="attr">a</span>: <span class="number">1</span>, </span><br><span class="line">                  <span class="attr">b</span>: <span class="string">&#x27;1&#x27;</span>, </span><br><span class="line">                  <span class="attr">c</span>: <span class="literal">true</span>, </span><br><span class="line">                  <span class="attr">d</span>: <span class="literal">false</span>, </span><br><span class="line">                  <span class="attr">e</span>: <span class="literal">null</span>, </span><br><span class="line">                  <span class="attr">f</span>: <span class="literal">undefined</span>, </span><br><span class="line">                  <span class="attr">g</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">                  <span class="attr">h</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;b&#x27;</span>),</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            ...a,</span><br><span class="line">            a</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)()</span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;number&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="title class_">Tests</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123;tests, message&#125;</span>) =&gt;</span> <span class="title function_">runTests</span>(tests, message))</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83b27267515a4fbd8b4d4ac7d27ec7be~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><a href="https://github.com/Luoyuda/js-demo/tree/master/js/clone">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;p&gt;在了解深、浅拷贝之前，得先了解 &lt;code&gt;JavaScript&lt;/code&gt; 中的数据类型和存储方式&lt;/p&gt;
&lt;p&gt;&lt;im</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="深拷贝" scheme="https://luoyuda.github.io/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
    <category term="浅拷贝" scheme="https://luoyuda.github.io/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>飘忽不定的 this 与 call / apply / bind / new （JavaScript）</title>
    <link href="https://luoyuda.github.io/2022/04/05/JavaScript/this/"/>
    <id>https://luoyuda.github.io/2022/04/05/JavaScript/this/</id>
    <published>2022-04-05T06:00:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this"><a href="#this" class="headerlink" title="this"></a><code>this</code></h1><p><code>JavaScript</code> 作为一个语言，有着一堆怪异的表现，最耀眼的那颗星必是 <code>this</code> 关键字</p><h2 id="为什么会出现-this"><a href="#为什么会出现-this" class="headerlink" title="为什么会出现 this"></a>为什么会出现 <code>this</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">d</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">d</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d409dd5b2f0d42da9830d5f41578327c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>根据我们对于基本数据类型与引用数据类型的理解，这里的 <code>value</code> 储存的实际上是什么？</p><p>它实际上应该是一个存储在 <code>栈内存</code> 中的 <code>内存地址</code>，指向 <code>堆内存</code> 中的 <code>函数主体</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c143997b0973473a9836a1a65de25728~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这时候如果有一个新的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    <span class="attr">b</span>: a.<span class="property">b</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dbd97a1c7a1b43958c20678f4f90ee30~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>那问题来了，函数允许在不同的上下文中执行</p><p>我要打印对象上的 <code>d</code>，需要有一个可以指代执行环境的关键字，这时候 <code>this</code> 就产生了</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddcab29da5fe4482b2cecda2e580e9bd~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>所以 <code>this</code> 本质上是获取内部执行环境<code>(context)</code>的一种机制，所以 <code>this</code> 的值是函数内部执行环境初始化时才决定，且不能进行更改</p><h2 id="如何确定-this-的值"><a href="#如何确定-this-的值" class="headerlink" title="如何确定 this 的值"></a>如何确定 <code>this</code> 的值</h2><p><code>this</code> 指向调用该函数的对象，储存着调用该函数对象的值。也就是说，搞清由谁调用了这个函数，就能准确的找到 <code>this</code> 指向哪个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接上</span></span><br><span class="line">a.<span class="title function_">b</span>() <span class="comment">// a对象上调用了b</span></span><br><span class="line">c.<span class="title function_">b</span>() <span class="comment">// c对象上调用了c</span></span><br><span class="line"><span class="keyword">var</span> e = c.<span class="property">b</span> <span class="comment">// 这里实际上是使用一个 e 变量存储了 b 函数的引用地址！</span></span><br><span class="line"><span class="title function_">e</span>() <span class="comment">// 这里是谁调用了 b ？</span></span><br></pre></td></tr></table></figure><h2 id="this-的指向规则"><a href="#this-的指向规则" class="headerlink" title="this 的指向规则"></a><code>this</code> 的指向规则</h2><h3 id="默认绑定-b-b-b-b-b-b-b"><a href="#默认绑定-b-b-b-b-b-b-b" class="headerlink" title="默认绑定 (b() / (b = b)() / (b || b)() / (b, b)() ...)"></a>默认绑定 <code>(b() / (b = b)() / (b || b)() / (b, b)() ...)</code></h3><p>默认绑定是指函数作为独立函数调用时，<code>this</code> 指向全局对象 <code>window</code> (严格模式下是 <code>undefined</code>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">b</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">c</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d = a.<span class="property">b</span>;</span><br><span class="line"><span class="title function_">d</span>();</span><br><span class="line"><span class="comment">// 赋值时导致隐形丢失</span></span><br><span class="line">((a.<span class="property">b</span>, a.<span class="property">b</span>))();</span><br><span class="line">((a.<span class="property">b</span> = a.<span class="property">b</span>))(); </span><br><span class="line">((a.<span class="property">b</span> || a.<span class="property">b</span>))();</span><br><span class="line">((a.<span class="property">b</span> &amp;&amp; a.<span class="property">b</span>))();</span><br><span class="line"><span class="built_in">setTimeout</span>(a.<span class="property">b</span>);</span><br><span class="line"><span class="built_in">setInterval</span>(a.<span class="property">b</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><pre><code>new绑定    new 来调用 foo() 时，我们会构造一个新对象并把它绑定到 foo() 调用中的 this 上</code></pre><h3 id="隐式绑定-a-b"><a href="#隐式绑定-a-b" class="headerlink" title="隐式绑定 (a.b)"></a>隐式绑定 <code>(a.b)</code></h3><p>函数的调用是在某个对象上触发的，即调用位置上存在上下文对象，<code>a.b()</code>，绑定 <code>a</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">b</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">c</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="attr">d</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">c</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">c</span>: <span class="string">&#x27;d&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">b</span>() <span class="comment">// a</span></span><br><span class="line">a.<span class="property">d</span>.<span class="title function_">b</span>() <span class="comment">// d 就近</span></span><br></pre></td></tr></table></figure><h3 id="显示绑定-call-apply-bind"><a href="#显示绑定-call-apply-bind" class="headerlink" title="显示绑定 (call / apply / bind)"></a>显示绑定 <code>(call / apply / bind)</code></h3><p>通过 <code>call</code> , <code>apply</code> , <code>bind</code> 的方式，显式的指定 <code>this</code> 所指向的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">c</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d = &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;d&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e = &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;e&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">b</span>() <span class="comment">// window</span></span><br><span class="line">b.<span class="title function_">call</span>(a) <span class="comment">// a</span></span><br><span class="line">b.<span class="title function_">apply</span>(d) <span class="comment">// d</span></span><br><span class="line">b.<span class="title function_">bind</span>(e)() <span class="comment">// e</span></span><br></pre></td></tr></table></figure><h4 id="call-apply-模拟实现"><a href="#call-apply-模拟实现" class="headerlink" title="call / apply 模拟实现"></a><code>call / apply</code> 模拟实现</h4><p>使用一个指定的 <code>this</code> 值调用某个函数</p><ol><li>将函数设为对象属性</li><li>执行函数</li><li>删除该对象属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newCall</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;no function&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> context = <span class="variable language_">arguments</span>[<span class="number">0</span>] || <span class="variable language_">window</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">var</span> args = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    args.<span class="title function_">push</span>(<span class="variable language_">arguments</span>[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;context.fn(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newApply</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;no function&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> context = <span class="variable language_">arguments</span>[<span class="number">0</span>] || <span class="variable language_">window</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">var</span> args = <span class="variable language_">arguments</span>[<span class="number">1</span>] || []</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;context.fn(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bind-模拟实现"><a href="#bind-模拟实现" class="headerlink" title="bind 模拟实现"></a><code>bind</code> 模拟实现</h4><p>创建一个新函数，使用第一个参数作为运行新函数的 this  其他参数作为新函数的入参</p><ol><li>取出入参</li><li>新建一个函数 <code>F()</code> 作为参数返回值</li><li>创建一个 函数 <code>f() f.prototype = this.prototype F.prototype = new f()</code></li><li>修改返回函数的 <code>prototype</code> 为绑定函数的 <code>prototype</code>，实例就可以继承绑定函数的原型中的值</li><li>函数调用的时候，新传入的参数跟之前提取的参数合并为一个数组</li><li><code>self.apply( this instanceof F ? this : context, arg )</code> ‘是否 new 调用’, <code>this instanceof fBound&quot;</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newBind</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;no function&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> context = <span class="variable language_">arguments</span>[<span class="number">0</span>] || <span class="variable language_">window</span></span><br><span class="line">  <span class="keyword">var</span> fn = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">var</span> F = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> args = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) args.<span class="title function_">push</span>(<span class="variable language_">arguments</span>[i])</span><br><span class="line">  <span class="keyword">var</span> bind = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) args.<span class="title function_">push</span>(<span class="variable language_">arguments</span>[i])</span><br><span class="line">    context = <span class="variable language_">this</span> <span class="keyword">instanceof</span> bind ? <span class="variable language_">this</span> : context</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">apply</span>(context, args)</span><br><span class="line">  &#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">  bind.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">  bind.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = bind</span><br><span class="line">  <span class="keyword">return</span> bind</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="new-操作符绑定-new-b"><a href="#new-操作符绑定-new-b" class="headerlink" title="new 操作符绑定 (new b())"></a><code>new</code> 操作符绑定 <code>(new b())</code></h3><p><code>new</code> 来调用 <code>b()</code> 时，会构造一个新对象并把它绑定到 <code>foo()</code> 调用中的 <code>this</code> 上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title function_">b</span>(<span class="number">1</span>).<span class="property">a</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="new-模拟实现"><a href="#new-模拟实现" class="headerlink" title="new 模拟实现"></a><code>new</code> 模拟实现</h4><p>创建一个用户定义的对象类型实例</p><ol><li>先从 <code>Object.prototype</code> 克隆一个对象 <code>obj</code></li><li><code>Construtor</code> 是外部传入的构造器</li><li><code>obj.__proto__ = Construtor.prototype</code></li><li><code>ret = Construtor.apply(O, arguments)</code> 借用构造器给 <code>obj</code> 设置属性</li><li><code>ret || obj</code> 总是返回一个对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">New</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Constructor</span> = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  obj.<span class="property">__proto__</span> = <span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">  <span class="keyword">let</span> ret =<span class="title class_">Constructor</span>.<span class="title function_">apply</span>(obj, <span class="variable language_">arguments</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> ret === <span class="string">&#x27;object&#x27;</span> ? ret : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定优先级"><a href="#绑定优先级" class="headerlink" title="绑定优先级"></a>绑定优先级</h3><p>new绑定 &gt; 显式绑定 &gt; 隐式绑定 &gt; 默认绑定</p><h3 id="按规则判断-this-指向"><a href="#按规则判断-this-指向" class="headerlink" title="按规则判断 this 指向"></a>按规则判断 <code>this</code> 指向</h3><ol><li>是否 <code>new</code> 调用</li><li>是否 <code>call</code>、<code>apply</code>、<code>bind</code> 显性绑定</li><li>是否是当作某个对象方法调用</li><li>其余的都是用默认绑定</li></ol><h3 id="箭头函数的-this"><a href="#箭头函数的-this" class="headerlink" title="箭头函数的 this"></a>箭头函数的 <code>this</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">a</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">d</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>babel</code> 编译后，指向就浅而易见了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _this = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(_this);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(_this);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">d</span>: <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _this2 = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(_this2);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Luoyuda/js-demo/tree/master/js/this">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot; class=&quot;headerlink&quot; title=&quot;this&quot;&gt;&lt;/a&gt;&lt;code&gt;this&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt; 作为一个语言，有着一堆怪异的表现，最耀眼的那颗星必</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="this" scheme="https://luoyuda.github.io/tags/this/"/>
    
    <category term="call / apply" scheme="https://luoyuda.github.io/tags/call-apply/"/>
    
    <category term="bind" scheme="https://luoyuda.github.io/tags/bind/"/>
    
    <category term="new" scheme="https://luoyuda.github.io/tags/new/"/>
    
  </entry>
  
  <entry>
    <title>如何实现一个全等函数（JavaScript）</title>
    <link href="https://luoyuda.github.io/2022/04/04/JavaScript/eq/"/>
    <id>https://luoyuda.github.io/2022/04/04/JavaScript/eq/</id>
    <published>2022-04-04T07:00:00.000Z</published>
    <updated>2022-04-15T06:06:33.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何才算相等"><a href="#如何才算相等" class="headerlink" title="如何才算相等"></a>如何才算相等</h2><p>参（chao）考（xi）<code>underscore</code> 的实现</p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>虽然函数还没完成，但是得先把饼画出去，不然怎么招商引资？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; eq &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./eq.js&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">runTests</span> = (<span class="params">tests, message</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">describe</span>(message, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    tests.<span class="title function_">forEach</span>(<span class="function">(<span class="params">[args, res], i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> argMsg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        argMsg = args.<span class="title function_">toString</span>()</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">test</span>(<span class="string">`<span class="subst">$&#123;i&#125;</span>-<span class="subst">$&#123;argMsg&#125;</span>`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">expect</span>(<span class="title function_">eq</span>(...args)).<span class="title function_">toEqual</span>(res)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Tests</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">tests</span>: [</span><br><span class="line">      [[<span class="number">0</span>, <span class="number">0</span>], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="number">0</span>, -<span class="number">0</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="number">1</span>, <span class="number">1</span>], <span class="literal">true</span>],</span><br><span class="line">      [[-<span class="number">1</span>, <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">      [[-<span class="number">1</span>, -<span class="number">1</span>], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1</span>)], <span class="literal">true</span>],</span><br><span class="line">      [[-<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">Number</span>(-<span class="number">1</span>)], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="title class_">NaN</span>, <span class="title class_">NaN</span>], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="title class_">NaN</span>, <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="string">&#x27;1&#x27;</span>, <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="literal">true</span>, <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="literal">false</span>, <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="literal">null</span>, <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">      [[&#123;&#125;, <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">      [[[], <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="literal">undefined</span>, <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">String</span>(<span class="number">1</span>), <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>), <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;1&#x27;</span>), <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>), <span class="number">1</span>], <span class="literal">false</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;number&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">tests</span>: [</span><br><span class="line">      [[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;&#x27;</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="literal">true</span>, <span class="string">&#x27;&#x27;</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="literal">false</span>, <span class="string">&#x27;&#x27;</span>], <span class="literal">false</span>],</span><br><span class="line">      [[-<span class="number">1</span>, <span class="string">&#x27;-1&#x27;</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="title class_">NaN</span>, <span class="string">&#x27;NaN&#x27;</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;NaN&#x27;</span>), <span class="string">&#x27;NaN&#x27;</span>], <span class="literal">true</span>],</span><br><span class="line">      [[&#123;&#125;, <span class="string">&#x27;&#x27;</span>], <span class="literal">false</span>],</span><br><span class="line">      [[[], <span class="string">&#x27;&#x27;</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, <span class="string">&#x27;&#x27;</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="literal">null</span>, <span class="string">&#x27;&#x27;</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="literal">undefined</span>, <span class="string">&#x27;&#x27;</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&#x27;1&#x27;</span>), <span class="string">&#x27;1&#x27;</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>), <span class="string">&#x27;1&#x27;</span>], <span class="literal">false</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;string&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">tests</span>: [</span><br><span class="line">      [[<span class="regexp">/a/</span>, <span class="regexp">/a/</span>], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="regexp">/a/ig</span>, <span class="regexp">/a/</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="regexp">/a/</span>, <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;a&#x27;</span>)], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="regexp">/a/i</span>, <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;i&#x27;</span>)], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="regexp">/a/ig</span>, <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;ig&#x27;</span>)], <span class="literal">true</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;RegExp&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">tests</span>: [</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>), <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>)], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>), <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>)], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="literal">true</span>, <span class="literal">true</span>], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="literal">true</span>, <span class="literal">false</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>)], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="literal">false</span>, <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="literal">undefined</span>, <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)], <span class="literal">false</span>],</span><br><span class="line">      [[[], <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)], <span class="literal">false</span>],</span><br><span class="line">      [[&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;false&#x27;</span>), <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="string">&#x27;false&#x27;</span>), <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)], <span class="literal">false</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;boolean&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">tests</span>: [</span><br><span class="line">      [[<span class="literal">undefined</span>, <span class="literal">null</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="literal">undefined</span>, <span class="literal">undefined</span>], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="literal">null</span>, <span class="literal">null</span>], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">null</span>), <span class="literal">null</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">String</span>(<span class="literal">null</span>), <span class="literal">null</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="literal">null</span>), <span class="literal">null</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">undefined</span>), <span class="literal">undefined</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">String</span>(<span class="literal">undefined</span>), <span class="literal">undefined</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="literal">undefined</span>), <span class="literal">undefined</span>], <span class="literal">false</span>],</span><br><span class="line">      [[[], <span class="literal">undefined</span>], <span class="literal">false</span>],</span><br><span class="line">      [[&#123;&#125;, <span class="literal">undefined</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, <span class="literal">undefined</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="number">0</span>, <span class="literal">undefined</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="string">&#x27;&#x27;</span>, <span class="literal">undefined</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="string">&#x27;0&#x27;</span>, <span class="literal">undefined</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="number">0</span>, <span class="literal">null</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="string">&#x27;&#x27;</span>, <span class="literal">null</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="string">&#x27;0&#x27;</span>, <span class="literal">null</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="title class_">NaN</span>, <span class="literal">null</span>], <span class="literal">false</span>],</span><br><span class="line">      [[<span class="title class_">NaN</span>, <span class="literal">undefined</span>], <span class="literal">false</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;undefined null&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">tests</span>: (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">var</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        [[<span class="title class_">Symbol</span>(<span class="number">1</span>), <span class="title class_">Symbol</span>(<span class="number">1</span>)], <span class="literal">false</span>],</span><br><span class="line">        [[<span class="title class_">Symbol</span>(<span class="string">&#x27;1&#x27;</span>), <span class="title class_">Symbol</span>(<span class="string">&#x27;1&#x27;</span>)], <span class="literal">false</span>],</span><br><span class="line">        [[<span class="title class_">Symbol</span>(<span class="string">&#x27;1&#x27;</span>), <span class="title class_">Symbol</span>(<span class="number">1</span>)], <span class="literal">false</span>],</span><br><span class="line">        [[s1, s2], <span class="literal">true</span>],</span><br><span class="line">      ]</span><br><span class="line">    &#125;)(),</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Symbol&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">tests</span>: (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> f1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">      <span class="keyword">var</span> <span class="title function_">f2</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        [[f1, <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;], <span class="literal">false</span>],</span><br><span class="line">        [[f2, <span class="function">() =&gt;</span> &#123;&#125;], <span class="literal">false</span>],</span><br><span class="line">        [[f1, f1], <span class="literal">true</span>],</span><br><span class="line">        [[f2, f2], <span class="literal">true</span>],</span><br><span class="line">        [[f2, f1], <span class="literal">false</span>],</span><br><span class="line">      ]</span><br><span class="line">    &#125;)(),</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;function&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">tests</span>: [</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="keyword">new</span> <span class="title class_">Date</span>()], <span class="literal">true</span>],</span><br><span class="line">      [[<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1</span>)], <span class="literal">false</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;date&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">tests</span>: (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">a</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = a</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">B</span>(<span class="params">a</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = a</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">A</span>(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">A</span>(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title function_">A</span>(<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">var</span> c = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">var</span> e = &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">        e</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> f = &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">        f</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> g = &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">        f</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        [[a, b], <span class="literal">true</span>],</span><br><span class="line">        [[a, c], <span class="literal">false</span>],</span><br><span class="line">        [[a, d], <span class="literal">false</span>],</span><br><span class="line">        [[&#123;&#125;, []], <span class="literal">false</span>],</span><br><span class="line">        [[&#123;&#125;, &#123;&#125;], <span class="literal">true</span>],</span><br><span class="line">        [[&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;], <span class="literal">true</span>],</span><br><span class="line">        [[&#123;<span class="attr">a</span>: <span class="number">2</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;], <span class="literal">false</span>],</span><br><span class="line">        [[&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;c : <span class="number">1</span>, <span class="attr">d</span>: <span class="number">2</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;c : <span class="number">1</span>, <span class="attr">d</span>: <span class="number">2</span>, &#125;&#125;], <span class="literal">true</span>],</span><br><span class="line">        [[[&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;c : <span class="number">1</span>, <span class="attr">d</span>: <span class="number">2</span>&#125;&#125;], [&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;c : <span class="number">1</span>, <span class="attr">d</span>: <span class="number">2</span>, &#125;&#125;]], <span class="literal">true</span>],</span><br><span class="line">        [[&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;c : <span class="number">1</span>, <span class="attr">d</span>: <span class="number">2</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;c : <span class="number">1</span>, <span class="attr">d</span>: <span class="number">2</span>, <span class="attr">e</span>:<span class="number">1</span> &#125;&#125;], <span class="literal">false</span>],</span><br><span class="line">        [[e, f], <span class="literal">true</span>],</span><br><span class="line">        [[e, g], <span class="literal">true</span>],</span><br><span class="line">        [[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]], <span class="literal">true</span>],</span><br><span class="line">      ]</span><br><span class="line">    &#125;)(),</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;object&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="title class_">Tests</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123;tests, message&#125;</span>) =&gt;</span> <span class="title function_">runTests</span>(tests, message))</span><br></pre></td></tr></table></figure><h2 id="开始写-eq-函数"><a href="#开始写-eq-函数" class="headerlink" title="开始写 eq 函数"></a>开始写 eq 函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">eq</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    eq</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3406af1ccbcc4108a916332bac379c9e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="基本类型比较部分"><a href="#基本类型比较部分" class="headerlink" title="基本类型比较部分"></a>基本类型比较部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">eq</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">  <span class="comment">// 处理 -0 和 +0 的情况和相同的基本类型的比较</span></span><br><span class="line">  <span class="keyword">if</span>(a === b) <span class="keyword">return</span> a !== <span class="number">0</span> || <span class="number">1</span> / a === <span class="number">1</span> / b</span><br><span class="line">  <span class="comment">// 处理 NaN</span></span><br><span class="line">  <span class="keyword">if</span>(a !== a) <span class="keyword">return</span> b !== b</span><br><span class="line">  <span class="comment">// 处理 null 的情况</span></span><br><span class="line">  <span class="keyword">if</span>(a == <span class="literal">null</span> || b == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 过滤 a 或 b 中存在一个基本类型的情况</span></span><br><span class="line">  <span class="keyword">var</span> type = <span class="keyword">typeof</span> a</span><br><span class="line">  <span class="keyword">if</span>(type !== <span class="string">&#x27;function&#x27;</span> &amp;&amp; type !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> b !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 开始对象类型的比较</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">deepEqual</span>(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要着重处理了 <code>-0</code> 和 <code>NaN</code> 的情况</p><h3 id="0-amp-0"><a href="#0-amp-0" class="headerlink" title="-0 &amp; 0"></a>-0 &amp; 0</h3><p>这个显然是不相等的，但是在JavaScript中是相等的</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e126fbc0b16e48d58eed010f102221fc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>真的要研究为什么会有 <code>-0</code> 是因为底层存储使用的是带符号位的二进制存储 <code>number</code> 类型，<code>-0</code> 则是符号位为 <code>10</code> 的情况，<code>+0</code> 则为 <code>00</code>，符号位为 <code>0</code></p><h3 id="对象类型该如何比较？"><a href="#对象类型该如何比较？" class="headerlink" title="对象类型该如何比较？"></a>对象类型该如何比较？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepEqual</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> typeA = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a)</span><br><span class="line">  <span class="keyword">var</span> typeB = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(b)</span><br><span class="line">  <span class="comment">// 类型都不一样，没法相爱</span></span><br><span class="line">  <span class="keyword">if</span>(typeA !== typeB) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 通过隐式类型转换处理为基本类型再比较</span></span><br><span class="line">  <span class="keyword">switch</span>(typeA) &#123;</span><br><span class="line">    <span class="comment">// 处理 Number() new Number() 的情况</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object Number]&#x27;</span>:</span><br><span class="line">      <span class="comment">// + new Number(1) === + new Number(1).valueOf()</span></span><br><span class="line">      <span class="keyword">if</span>(+a !== +a) <span class="keyword">return</span> +b !== +b</span><br><span class="line">      <span class="keyword">if</span>(+a === +b) <span class="keyword">return</span> <span class="number">1</span> / a === <span class="number">1</span> / b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时已经通过 <code>number</code> 的测试用例辣</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d55009830e134e3c8e2b2598ec9fb365~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>接着处理 <code>new String()</code> 和 <code>new RegExp()</code> 这种情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepEqual</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> typeA = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a)</span><br><span class="line">  <span class="keyword">var</span> typeB = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(b)</span><br><span class="line">  <span class="comment">// 类型都不一样，没法相爱</span></span><br><span class="line">  <span class="keyword">if</span>(typeA !== typeB) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 通过隐式类型转换处理为基本类型再比较</span></span><br><span class="line">  <span class="keyword">switch</span>(typeA) &#123;</span><br><span class="line">    <span class="comment">// 处理 Number() new Number() 的情况</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object Number]&#x27;</span>:</span><br><span class="line">      <span class="comment">// + new Number(1) === + new Number(1).valueOf()</span></span><br><span class="line">      <span class="keyword">if</span>(+a !== +a) <span class="keyword">return</span> +b !== +b</span><br><span class="line">      <span class="keyword">if</span>(+a === +b) <span class="keyword">return</span> <span class="number">1</span> / a === <span class="number">1</span> / b</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object RegExp]&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object String]&#x27;</span>:</span><br><span class="line">      <span class="comment">// &#x27;&#x27; + new RegExp() === &#x27;&#x27; + new RegExp().toString()</span></span><br><span class="line">      <span class="comment">// &#x27;&#x27; + new String() === &#x27;&#x27; + new String().toString()</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span> + a === <span class="string">&#x27;&#x27;</span> + b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1597b9b94d134168a571eaebafcb1bf2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>以同样的思路处理 <code>new Boolean()</code> 和 <code>new Date()</code> 的情况</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17e2a670f002440696d703b947a099e9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>顺手处理下 <code>Symbol</code> 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepEqual</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> typeA = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a)</span><br><span class="line">  <span class="keyword">var</span> typeB = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(b)</span><br><span class="line">  <span class="comment">// 类型都不一样，没法相爱</span></span><br><span class="line">  <span class="keyword">if</span>(typeA !== typeB) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 通过隐式类型转换处理为基本类型再比较</span></span><br><span class="line">  <span class="keyword">switch</span>(typeA) &#123;</span><br><span class="line">    <span class="comment">// 处理 Number() new Number() 的情况</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object Number]&#x27;</span>:</span><br><span class="line">      <span class="comment">// + new Number(1) === + new Number(1).valueOf()</span></span><br><span class="line">      <span class="keyword">if</span>(+a !== +a) <span class="keyword">return</span> +b !== +b</span><br><span class="line">      <span class="keyword">if</span>(+a === +b) <span class="keyword">return</span> <span class="number">1</span> / a === <span class="number">1</span> / b</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object RegExp]&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object String]&#x27;</span>:</span><br><span class="line">      <span class="comment">// &#x27;&#x27; + new RegExp() === &#x27;&#x27; + new RegExp().toString()</span></span><br><span class="line">      <span class="comment">// &#x27;&#x27; + new String() === &#x27;&#x27; + new String().toString()</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span> + a === <span class="string">&#x27;&#x27;</span> + b</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object Boolean]&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object Date]&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> +a === +b</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object Symbol]&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Symbol</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">valueOf</span>.<span class="title function_">call</span>(a) === <span class="title class_">Symbol</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">valueOf</span>.<span class="title function_">call</span>(b)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/426c6165c3f042ad9ee57dd230e33556~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>处理 <code>function</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="comment">// 到这里还剩下三种类型，Array || Object || function</span></span><br><span class="line">  <span class="keyword">var</span> isArray = typeA === <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span>(!isArray) &#123;</span><br><span class="line">    <span class="comment">// 这里过滤 function 类型</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> a !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/211d6a9d80a345e3969e9a2cb741f298~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 到这里还剩下三种类型，Array || Object || function</span></span><br><span class="line"><span class="keyword">var</span> isArray = typeA === <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!isArray) &#123;</span><br><span class="line">  <span class="comment">// 这里过滤 function 类型</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> a !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 这里需要判断对象类型是否是同一个构造器</span></span><br><span class="line">  <span class="keyword">var</span> aCtor = a.<span class="property">constructor</span></span><br><span class="line">  <span class="keyword">var</span> bCtor = b.<span class="property">constructor</span></span><br><span class="line">  <span class="keyword">if</span>(</span><br><span class="line">    aCtor !== bCtor &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> aCtor !== <span class="string">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class="line">    aCtor <span class="keyword">instanceof</span> aCtor &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> bCtor !== <span class="string">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class="line">    bCtor <span class="keyword">instanceof</span> bCtor &amp;&amp;</span><br><span class="line">    (<span class="string">&#x27;constructor&#x27;</span> <span class="keyword">in</span> a &amp;&amp; <span class="string">&#x27;constructor&#x27;</span> <span class="keyword">in</span> b)</span><br><span class="line">  )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 到这里已经是要么是数组，要么是同类型的实例对象</span></span><br></pre></td></tr></table></figure><p>接下去该怎么对数组&#x2F;对象的每一项进行比较呢？显然得考虑深度问题，所以得引入递归</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">eq</span>(<span class="params">a, b, aStack, bStack</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">deepEqual</span>(a, b, aStack, bStack)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepEqual</span>(<span class="params">a, b, aStack, bStack</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 到这里已经是要么是数组，要么是同类型的实例对象</span></span><br><span class="line">  aStack = aStack || []</span><br><span class="line">  bStack = bStack || []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过递归每一项去比对，通过栈来管理深度问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 到这里已经是要么是数组，要么是同类型的实例对象</span></span><br><span class="line">aStack = aStack || []</span><br><span class="line">bStack = bStack || []</span><br><span class="line"><span class="comment">// 优先处理循环引用的问题</span></span><br><span class="line"><span class="keyword">var</span> len = aStack.<span class="property">length</span></span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">  <span class="keyword">if</span>(aStack[len] === a) <span class="keyword">return</span> bStack[len] === b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不存在循环引用，将a b 分别入栈</span></span><br><span class="line">aStack.<span class="title function_">push</span>(a)</span><br><span class="line">bStack.<span class="title function_">push</span>(b)</span><br><span class="line"><span class="keyword">if</span>(isArray)&#123;</span><br><span class="line">  <span class="keyword">var</span> len = a.<span class="property">length</span></span><br><span class="line">  <span class="comment">// 个数不同，不能恋爱</span></span><br><span class="line">  <span class="keyword">if</span>(len !== b.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">    <span class="comment">// 详细对每一项进行比对</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_">eq</span>(a[len], b[len], aStack, bStack)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">// 这里偷懒用 Object.keys</span></span><br><span class="line">  <span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(a)</span><br><span class="line">  <span class="keyword">var</span> len = keys.<span class="property">length</span></span><br><span class="line">  <span class="comment">// 个数不同，不能恋爱</span></span><br><span class="line">  <span class="keyword">if</span>(len !== <span class="title class_">Object</span>.<span class="title function_">keys</span>(b).<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">    <span class="comment">// 详细对每一项进行比对</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_">eq</span>(a[keys[len]], b[keys[len]], aStack, bStack)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比对结束了，记得出栈！</span></span><br><span class="line">aStack.<span class="title function_">pop</span>()</span><br><span class="line">bStack.<span class="title function_">pop</span>()</span><br><span class="line"><span class="comment">// 大功告成</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4b0993f6e284cb6a0e40b929d77f985~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; a </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; b </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; aStack </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; bStack </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> <span class="variable">Boolean</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">eq</span>(<span class="params">a, b, aStack, bStack</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理 -0 和 +0 的情况和相同的基本类型的比较</span></span><br><span class="line">  <span class="keyword">if</span>(a === b) <span class="keyword">return</span> a !== <span class="number">0</span> || <span class="number">1</span> / a === <span class="number">1</span> / b</span><br><span class="line">  <span class="comment">// 处理 NaN</span></span><br><span class="line">  <span class="keyword">if</span>(a !== a) <span class="keyword">return</span> b !== b</span><br><span class="line">  <span class="comment">// 处理 null 的情况</span></span><br><span class="line">  <span class="keyword">if</span>(a == <span class="literal">null</span> || b == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 过滤 a 或 b 中存在一个基本类型的情况</span></span><br><span class="line">  <span class="keyword">var</span> type = <span class="keyword">typeof</span> a</span><br><span class="line">  <span class="keyword">if</span>(type !== <span class="string">&#x27;function&#x27;</span> &amp;&amp; type !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> b !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 开始对象类型的比较</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">deepEqual</span>(a, b, aStack, bStack)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; a </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; b </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; aStack </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; bStack </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> <span class="variable">Boolean</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepEqual</span>(<span class="params">a, b, aStack, bStack</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> typeA = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a)</span><br><span class="line">  <span class="keyword">var</span> typeB = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(b)</span><br><span class="line">  <span class="comment">// 类型都不一样，没法相爱</span></span><br><span class="line">  <span class="keyword">if</span>(typeA !== typeB) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 通过隐式类型转换处理为基本类型再比较</span></span><br><span class="line">  <span class="keyword">switch</span>(typeA) &#123;</span><br><span class="line">    <span class="comment">// 处理 Number() new Number() 的情况</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object Number]&#x27;</span>:</span><br><span class="line">      <span class="comment">// + new Number(1) === + new Number(1).valueOf()</span></span><br><span class="line">      <span class="keyword">if</span>(+a !== +a) <span class="keyword">return</span> +b !== +b</span><br><span class="line">      <span class="keyword">if</span>(+a === +b) <span class="keyword">return</span> <span class="number">1</span> / a === <span class="number">1</span> / b</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object RegExp]&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object String]&#x27;</span>:</span><br><span class="line">      <span class="comment">// &#x27;&#x27; + new RegExp() === &#x27;&#x27; + new RegExp().toString()</span></span><br><span class="line">      <span class="comment">// &#x27;&#x27; + new String() === &#x27;&#x27; + new String().toString()</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span> + a === <span class="string">&#x27;&#x27;</span> + b</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object Boolean]&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object Date]&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> +a === +b</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[object Symbol]&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Symbol</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">valueOf</span>.<span class="title function_">call</span>(a) === <span class="title class_">Symbol</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">valueOf</span>.<span class="title function_">call</span>(b)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 到这里还剩下三种类型，Array || Object || function</span></span><br><span class="line">  <span class="keyword">var</span> isArray = typeA === <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span>(!isArray) &#123;</span><br><span class="line">    <span class="comment">// 这里过滤 function 类型</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> a !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 这里需要判断对象类型是否是同一个构造器</span></span><br><span class="line">    <span class="keyword">var</span> aCtor = a.<span class="property">constructor</span></span><br><span class="line">    <span class="keyword">var</span> bCtor = b.<span class="property">constructor</span></span><br><span class="line">    <span class="keyword">if</span>(</span><br><span class="line">      aCtor !== bCtor &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> aCtor !== <span class="string">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class="line">      aCtor <span class="keyword">instanceof</span> aCtor &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> bCtor !== <span class="string">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class="line">      bCtor <span class="keyword">instanceof</span> bCtor &amp;&amp;</span><br><span class="line">      (<span class="string">&#x27;constructor&#x27;</span> <span class="keyword">in</span> a &amp;&amp; <span class="string">&#x27;constructor&#x27;</span> <span class="keyword">in</span> b)</span><br><span class="line">    )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 到这里已经是要么是数组，要么是同类型的实例对象</span></span><br><span class="line">  aStack = aStack || []</span><br><span class="line">  bStack = bStack || []</span><br><span class="line">  <span class="comment">// 优先处理循环引用的问题</span></span><br><span class="line">  <span class="keyword">var</span> len = aStack.<span class="property">length</span></span><br><span class="line">  <span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    <span class="keyword">if</span>(aStack[len] === a) <span class="keyword">return</span> bStack[len] === b</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 不存在循环引用，将a b 分别入栈</span></span><br><span class="line">  aStack.<span class="title function_">push</span>(a)</span><br><span class="line">  bStack.<span class="title function_">push</span>(b)</span><br><span class="line">  <span class="keyword">if</span>(isArray)&#123;</span><br><span class="line">    <span class="keyword">var</span> len = a.<span class="property">length</span></span><br><span class="line">    <span class="comment">// 个数不同，不能恋爱</span></span><br><span class="line">    <span class="keyword">if</span>(len !== b.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">      <span class="comment">// 详细对每一项进行比对</span></span><br><span class="line">      <span class="keyword">if</span>(!<span class="title function_">eq</span>(a[len], b[len], aStack, bStack)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 这里偷懒用 Object.keys</span></span><br><span class="line">    <span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(a)</span><br><span class="line">    <span class="keyword">var</span> len = keys.<span class="property">length</span></span><br><span class="line">    <span class="comment">// 个数不同，不能恋爱</span></span><br><span class="line">    <span class="keyword">if</span>(len !== <span class="title class_">Object</span>.<span class="title function_">keys</span>(b).<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">      <span class="comment">// 详细对每一项进行比对</span></span><br><span class="line">      <span class="keyword">if</span>(!<span class="title function_">eq</span>(a[keys[len]], b[keys[len]], aStack, bStack)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 比对结束了，记得出栈！</span></span><br><span class="line">  aStack.<span class="title function_">pop</span>()</span><br><span class="line">  bStack.<span class="title function_">pop</span>()</span><br><span class="line">  <span class="comment">// 大功告成</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    eq</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Luoyuda/js-demo/tree/master/js/eq">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;如何才算相等&quot;&gt;&lt;a href=&quot;#如何才算相等&quot; class=&quot;headerlink&quot; title=&quot;如何才算相等&quot;&gt;&lt;/a&gt;如何才算相等&lt;/h2&gt;&lt;p&gt;参（chao）考（xi）&lt;code&gt;underscore&lt;/code&gt; 的实现&lt;/p&gt;
&lt;h2 id=&quot;测试</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="全等" scheme="https://luoyuda.github.io/tags/%E5%85%A8%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>去重到底有多少种写法？（JavaScript）</title>
    <link href="https://luoyuda.github.io/2022/04/02/JavaScript/unique/"/>
    <id>https://luoyuda.github.io/2022/04/02/JavaScript/unique/</id>
    <published>2022-04-02T07:00:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>在写代码之前写一组测试（使用 <code>Jest</code> ），这有利于我们每次修改后完善代码，我们先写一个对基本类型进行去重的版本（忽略 <code>NaN</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; unique &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./unique.1.js&#x27;</span>)</span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;unique&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title function_">genArray</span> = (<span class="params">len, cb</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Array</span>(len).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(cb)</span><br><span class="line">  <span class="keyword">var</span> <span class="title function_">genNumbers</span> = (<span class="params">gap, len = <span class="number">20</span></span>) =&gt; <span class="title function_">genArray</span>(len, <span class="function">(<span class="params">el, i</span>) =&gt;</span> i % gap)</span><br><span class="line">  <span class="keyword">var</span> <span class="title function_">genStrings</span> = (<span class="params">gap, len = <span class="number">20</span></span>) =&gt; <span class="title function_">genArray</span>(len, <span class="function">(<span class="params">el, i</span>) =&gt;</span> (i % gap) + <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> <span class="title function_">genBooleans</span> = (<span class="params">gap, len = <span class="number">4</span></span>) =&gt; <span class="title function_">genArray</span>(len, <span class="function">(<span class="params">el, i</span>) =&gt;</span> (i % gap) === <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">var</span> <span class="title function_">genUndefined</span> = (<span class="params">len = <span class="number">4</span></span>) =&gt; <span class="title function_">genArray</span>(len, <span class="function">() =&gt;</span> <span class="keyword">void</span> <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">var</span> <span class="title function_">genNull</span> = (<span class="params">len = <span class="number">4</span></span>) =&gt; <span class="title function_">genArray</span>(len, <span class="function">() =&gt;</span> <span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">var</span> tests = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;numbers&#x27;</span>,</span><br><span class="line">      <span class="attr">input</span>: <span class="title function_">genNumbers</span>(<span class="number">5</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;strings&#x27;</span>,</span><br><span class="line">      <span class="attr">input</span>: <span class="title function_">genStrings</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;booleans&#x27;</span>,</span><br><span class="line">      <span class="attr">input</span>: <span class="title function_">genBooleans</span>(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;undefined&#x27;</span>,</span><br><span class="line">      <span class="attr">input</span>: <span class="title function_">genUndefined</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;null&#x27;</span>,</span><br><span class="line">      <span class="attr">input</span>: <span class="title function_">genNull</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;complex&#x27;</span>,</span><br><span class="line">      <span class="attr">input</span>: [</span><br><span class="line">        ...<span class="title function_">genNumbers</span>(<span class="number">5</span>),</span><br><span class="line">        ...<span class="title function_">genStrings</span>(<span class="number">5</span>),</span><br><span class="line">        ...<span class="title function_">genBooleans</span>(<span class="number">2</span>),</span><br><span class="line">        ...<span class="title function_">genUndefined</span>(),</span><br><span class="line">        ...<span class="title function_">genNull</span>(),</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  tests.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123;message, input&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">test</span>(message, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(<span class="title function_">unique</span>(input)).<span class="title function_">toEqual</span>([...<span class="keyword">new</span> <span class="title class_">Set</span>(input)])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f067ddde3fae46dea70431d6a54273b1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="接着开始实现"><a href="#接着开始实现" class="headerlink" title="接着开始实现"></a>接着开始实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">unique</span> = unique</span><br></pre></td></tr></table></figure><p>保存后运行测试用例，必然没通过，因为啥也没有嘛</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f5c92f98f4e4bb4963a02ee531f2a8d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="Set-方式"><a href="#Set-方式" class="headerlink" title="Set 方式"></a>Set 方式</h2><p>上面使用 <code>new Set</code> 已经是一种去重方式了, 保存后运行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="keyword">new</span> <span class="title class_">Set</span>(list)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样肯定过的，没啥疑问</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84ffacd9010a4b58a9b0b84d3c4f33ed~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="最土的办法-双重-for"><a href="#最土的办法-双重-for" class="headerlink" title="最土的办法 双重 for"></a>最土的办法 双重 <code>for</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unique</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> hasEl = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; result.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="comment">// 检查收录的数据</span></span><br><span class="line">      <span class="keyword">if</span>(result[j] === list[i])&#123;</span><br><span class="line">        hasEl = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!hasEl) result.<span class="title function_">push</span>(list[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以写成这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unique</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(result.<span class="title function_">some</span>(<span class="function"><span class="params">el</span> =&gt;</span> el === item)) <span class="keyword">return</span></span><br><span class="line">    result.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>甚至你可以用万能的 <code>reduce</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unique</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!prev.<span class="title function_">some</span>(<span class="function"><span class="params">el</span> =&gt;</span> el === item)) prev.<span class="title function_">push</span>(item)</span><br><span class="line">    <span class="keyword">return</span> prev</span><br><span class="line">  &#125;, [])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然你也可以不用 <code>some</code> 换成 <code>indexOf</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unique</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(prev.<span class="title function_">indexOf</span>(item) === -<span class="number">1</span>) prev.<span class="title function_">push</span>(item)</span><br><span class="line">    <span class="keyword">return</span> prev</span><br><span class="line">  &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f22fbfbc6ab43c58cd18e469f073f1f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="优化时间复杂度的版本"><a href="#优化时间复杂度的版本" class="headerlink" title="优化时间复杂度的版本"></a>优化时间复杂度的版本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unique</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;</span><br><span class="line">  <span class="comment">// 处理 1 和 &#x27;1&#x27; 情况</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">key</span> = el =&gt; <span class="string">`[<span class="subst">$&#123;<span class="keyword">typeof</span> el&#125;</span> <span class="subst">$&#123;el&#125;</span>]`</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> el = list[i]</span><br><span class="line">    <span class="comment">// 注意这里也会有消耗,</span></span><br><span class="line">    <span class="comment">// 如果是不需要特别处理 1 和 &#x27;1&#x27; 不需要额外生成key</span></span><br><span class="line">    <span class="keyword">let</span> k = <span class="title function_">key</span>(el)</span><br><span class="line">    <span class="keyword">if</span>(!cache[k]) &#123;</span><br><span class="line">      cache[k] = <span class="literal">true</span></span><br><span class="line">      result.<span class="title function_">push</span>(el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以这么写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unique</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">key</span> = el =&gt; <span class="string">`[<span class="subst">$&#123;<span class="keyword">typeof</span> el&#125;</span> <span class="subst">$&#123;el&#125;</span>]`</span></span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="title function_">key</span>(item)</span><br><span class="line">    <span class="keyword">if</span>(cache[k]) <span class="keyword">return</span></span><br><span class="line">    cache[k] = <span class="literal">true</span></span><br><span class="line">    result.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过 <code>filter</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unique</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">computed</span> = el =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="string">`[<span class="subst">$&#123;<span class="keyword">typeof</span> el&#125;</span> <span class="subst">$&#123;el&#125;</span>]`</span></span><br><span class="line">    <span class="keyword">return</span> cache[k] ? <span class="literal">false</span> : cache[k] = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">filter</span>(computed)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是可以用万能的 <code>reduce</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unique</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    ...<span class="title class_">Object</span>.<span class="title function_">values</span>(</span><br><span class="line">      list.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        prev[<span class="string">`<span class="subst">$&#123;<span class="keyword">typeof</span> cur&#125;</span> <span class="subst">$&#123;cur&#125;</span>`</span>] = cur</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">      &#125;, &#123;&#125;)</span><br><span class="line">    )</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/409094868cbb4ca0ae8a56d5c04365eb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="排序后比对元素"><a href="#排序后比对元素" class="headerlink" title="排序后比对元素"></a>排序后比对元素</h2><p>注意这个会把数组重新排序，输出顺序不稳定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unique</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">  <span class="keyword">let</span> sort = list.<span class="title function_">slice</span>().<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a &lt; b ? -<span class="number">1</span> : <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">let</span> last</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sort.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = sort[i];</span><br><span class="line">    <span class="keyword">if</span>(!i || last !== element)&#123;</span><br><span class="line">      result.<span class="title function_">push</span>(element)</span><br><span class="line">    &#125;</span><br><span class="line">    last = element</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用 <code>filter</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unique</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">slice</span>()</span><br><span class="line">  .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a &lt; b ? -<span class="number">1</span> : <span class="number">1</span>).</span><br><span class="line">  <span class="title function_">filter</span>(<span class="function">(<span class="params">el, i, arr</span>) =&gt;</span> !i || arr[i - <span class="number">1</span>] !== el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e8515d3c504439f894780c289d84da0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>正常的情况到这里就已经差不多一共就 <code>Set</code> , <code>for循环</code>，<code>cache</code>和排序后比对前后元素四种方法。</p><p>是这个世界存在一个神奇的东西 <code>NaN</code>，<br>它并不等于自身，所以上面存在比较相等逻辑的方法被 <code>NaN</code> 爆杀，只剩<code>Set</code> 和 键值对才能对付 <code>NaN</code> 了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unique</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="keyword">new</span> <span class="title class_">Set</span>(list)]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unique</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (list)&#123;</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">computed</span> = el =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="string">`[<span class="subst">$&#123;<span class="keyword">typeof</span> el&#125;</span> <span class="subst">$&#123;el&#125;</span>]`</span></span><br><span class="line">    <span class="keyword">return</span> cache[k] ? <span class="literal">false</span> : cache[k] = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">filter</span>(computed)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>谨慎使用 <code>NaN</code> （最好不要让它出现）</p><h3 id="如果追求对象也去重"><a href="#如果追求对象也去重" class="headerlink" title="如果追求对象也去重"></a>如果追求对象也去重</h3><p>可以键值对的键值基础上 <code>JSON.stringify(value)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 去重</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[]</span>&#125; array 待去重数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Boolean</span>&#125; isSorted 是否排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">function</span>&#125; iteratee 比较函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; context 作用域</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">array, isSorted, iteratee, context</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> isSorted !== <span class="string">&#x27;boolean&#x27;</span>)&#123;</span><br><span class="line">    context = iteratee</span><br><span class="line">    iteratee = isSorted</span><br><span class="line">    isSorted = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(isSorted === <span class="literal">true</span>)&#123;</span><br><span class="line">    iteratee = <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="keyword">return</span> value &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> iteratee !== <span class="string">&quot;function&quot;</span>)&#123;</span><br><span class="line">    iteratee = <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      value = value <span class="keyword">instanceof</span> <span class="title class_">RegExp</span> ? value.<span class="title function_">toString</span>() : value</span><br><span class="line">      <span class="keyword">var</span> key = (<span class="keyword">typeof</span> value) + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value)</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>[key]) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="variable language_">this</span>[key] = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  iteratee = iteratee.<span class="title function_">bind</span>(context || &#123;&#125;)</span><br><span class="line">  <span class="keyword">var</span> result = []</span><br><span class="line">  <span class="keyword">var</span> last</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> value = array[i]</span><br><span class="line">    <span class="keyword">var</span> computed = <span class="title function_">iteratee</span>(value, i, array)</span><br><span class="line">    <span class="keyword">if</span>(isSorted)&#123;</span><br><span class="line">      <span class="keyword">if</span>(!i || computed !== last) result.<span class="title function_">push</span>(value)</span><br><span class="line">      last = value</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(computed) result.<span class="title function_">push</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Luoyuda/js-demo/tree/master/js/unique">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;测试用例&quot;&gt;&lt;a href=&quot;#测试用例&quot; class=&quot;headerlink&quot; title=&quot;测试用例&quot;&gt;&lt;/a&gt;测试用例&lt;/h2&gt;&lt;p&gt;在写代码之前写一组测试（使用 &lt;code&gt;Jest&lt;/code&gt; ），这有利于我们每次修改后完善代码，我们先写一个对基本类型</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="ES6" scheme="https://luoyuda.github.io/tags/ES6/"/>
    
    <category term="去重" scheme="https://luoyuda.github.io/tags/%E5%8E%BB%E9%87%8D/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 原型链与继承</title>
    <link href="https://luoyuda.github.io/2022/04/02/JavaScript/inherit/"/>
    <id>https://luoyuda.github.io/2022/04/02/JavaScript/inherit/</id>
    <published>2022-04-02T05:00:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p><code>prototype</code> 是函数上的一个属性</p><p><code>__proto__</code> 是对象实例上的属性，指向其构造函数的 <code>prototype</code> 属性</p><p>原型层层往上形成了原型链，需要注意的是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;&#125;).<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;&#125;).<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;&#125;).<span class="property"><span class="keyword">prototype</span></span> === <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d6c39c878d345829b2380b466cff269~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="ES6-class-相关的原型链相关知识"><a href="#ES6-class-相关的原型链相关知识" class="headerlink" title="ES6 class 相关的原型链相关知识"></a>ES6 class 相关的原型链相关知识</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line">A.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true</span></span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title function_">A</span>()</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">B</span>()</span><br><span class="line"></span><br><span class="line">B.<span class="property">__proto__</span> === A</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === A.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"></span><br><span class="line">b.<span class="property">__proto__</span> === B.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">b.<span class="property">__proto__</span>.<span class="property">__proto__</span> === A.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">b.<span class="property">__proto__</span>.<span class="property">__proto__</span> === a.<span class="property">__proto__</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property">setPrototypeOf</span> = <span class="keyword">function</span> (<span class="params">obj, proto</span>) &#123;</span><br><span class="line">  obj.<span class="property">__proto__</span> = proto;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// B 的实例继承 A 的实例</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(B.<span class="property"><span class="keyword">prototype</span></span>, A.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 继承 A 的静态属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(B, A);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><p>通过原型链实现继承</p><ul><li>缺点<ul><li>引用类型的属性绘本所有实例共享</li><li>创建 <code>Child</code> 实例无法向 <code>Parent</code> 传参</li></ul></li><li>原型链<ul><li><code>child.__proto__ -&gt; Child.prototype -&gt; new Parent()</code></li><li><code>Child.prototype.constructor -&gt; Parent</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;child&#x27;</span>)</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">sayName</span>() <span class="comment">// child</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child) <span class="comment">// Parent &#123; name: &#x27;child&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child <span class="keyword">instanceof</span> <span class="title class_">Parent</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child <span class="keyword">instanceof</span> <span class="title class_">Child</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">__proto__</span> === <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Parent</span>) <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5549975948546de98f5328b39b4df06~tplv-k3u1fbpfcp-watermark.image" alt="原型链继承"></p><h2 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h2><p>在子类中调用父类的构造函数绑定在子类的 <code>this</code> 上</p><ul><li>优点<ul><li>避免了引用类型被共享的问题</li><li><code>Child</code> 可以向 <code>Parent</code> 传参</li></ul></li><li>缺点<ul><li>每次创建实例都会创建一遍父类方法</li></ul></li><li>原型链<ul><li><code>child.__proto__ -&gt; Child.prototype</code></li><li><code>Child.prototype.constructor -&gt; Child</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent2</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child2</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="title class_">Parent2</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> <span class="title class_">Child2</span>(<span class="string">&#x27;child&#x27;</span>)</span><br><span class="line"></span><br><span class="line">child2.<span class="title function_">sayName</span>() <span class="comment">// child</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child2) <span class="comment">// Child2 &#123; name: &#x27;child&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child2 <span class="keyword">instanceof</span> <span class="title class_">Parent2</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child2 <span class="keyword">instanceof</span> <span class="title class_">Child2</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child2.<span class="property">__proto__</span> === <span class="title class_">Child2</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Child2</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Child2</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a75f474b87d64315a6c46e4587349a01~tplv-k3u1fbpfcp-watermark.image" alt="借用构造函数继承"></p><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>在子类中调用父类掉构造函数绑定到子类的 <code>this</code> 上，把子类的原型等于父类的实例</p><ul><li>优点<ul><li>避免引用被共享</li><li>不需要重复创建方法</li></ul></li><li>缺点<ul><li>需要多 <code>new</code> 一次</li></ul></li><li>原型链<ul><li><code>child.__proto__ -&gt; Child.prototype</code></li><li><code>Child.prototype.constructor -&gt; Child</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent3</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent3</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child3</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="title class_">Parent3</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child3</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="title class_">Child3</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child3 = <span class="keyword">new</span> <span class="title class_">Child3</span>(<span class="string">&#x27;child3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">child3.<span class="title function_">sayName</span>() <span class="comment">// child3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child3) <span class="comment">// Child3 &#123; name: &#x27;child3&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child3 <span class="keyword">instanceof</span> <span class="title class_">Parent2</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child3 <span class="keyword">instanceof</span> <span class="title class_">Child3</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child3.<span class="property">__proto__</span> === <span class="title class_">Child3</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Child3</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Child3</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a9dd6c2f979449b8a5b4253aff461e0~tplv-k3u1fbpfcp-watermark.image" alt="组合继承"></p><h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><p>将传入的对象作为创建的对象的原型</p><ul><li>缺点<ul><li>引用类型被共享</li></ul></li><li>原型链<ul><li><code>child.__proto__ -&gt; F.prototype -&gt; o</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> P = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;P&#x27;</span>,</span><br><span class="line">    <span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CreateObj</span>(<span class="params">o</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> child4 = <span class="title class_">CreateObj</span>(P)</span><br><span class="line"></span><br><span class="line">child4.<span class="title function_">sayName</span>() <span class="comment">// P</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child4) <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child4 <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child4.<span class="property">__proto__</span> === P) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba304926c668430e98ea34a5241de34b~tplv-k3u1fbpfcp-watermark.image" alt="原型式继承"></p><h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><p>创建一个封装继承过程的函数，用来增强对象，然后返回对象</p><ul><li>缺点<ul><li>重复创建方法</li><li>引用类型共享</li></ul></li><li>原型链<ul><li><code>child.__proto__ -&gt; o</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> P = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;P&#x27;</span>,</span><br><span class="line">    <span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CreateObj1</span>(<span class="params">o, name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(o)</span><br><span class="line">    clone.<span class="property">name</span> = name</span><br><span class="line">    <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child5 = <span class="title class_">CreateObj1</span>(P, <span class="string">&#x27;child5&#x27;</span>)</span><br><span class="line">child5.<span class="title function_">sayName</span>() <span class="comment">// P</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child5) <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child5 <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child5.<span class="property">__proto__</span> === P) <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c85db6e2bd5b4f0482cd1037d8fa458a~tplv-k3u1fbpfcp-watermark.image" alt="寄生式继承"></p><h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><ul><li>优点<ul><li>只调用一次父类构造函数</li><li>避免在 <code>Parent.prototype</code> 创建不必要多余的属性</li><li>原型链保持不变，能正常使用 <code>instanceof</code> 和 <code>isPrototypeOf</code></li></ul></li><li>原型链<ul><li><code>child.__proto__ -&gt; Child.prototype</code></li><li><code>Child.prototype.constructor -&gt; Child</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">o</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inherit</span>(<span class="params">child, parent</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> prototype = <span class="title function_">object</span>(parent.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    prototype.<span class="property">constructor</span> = child</span><br><span class="line">    child.<span class="property"><span class="keyword">prototype</span></span> = prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent6</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent6</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child6</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="comment">// 增强子类实例</span></span><br><span class="line">    <span class="title class_">Parent6</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定原型</span></span><br><span class="line"><span class="title function_">inherit</span>(<span class="title class_">Child6</span>, <span class="title class_">Parent6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child6 = <span class="keyword">new</span> <span class="title class_">Child6</span>(<span class="string">&#x27;child6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">child6.<span class="title function_">sayName</span>() <span class="comment">// child6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child6) <span class="comment">// Child6 &#123; name: &#x27;child6&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child6 <span class="keyword">instanceof</span> <span class="title class_">Child6</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child6 <span class="keyword">instanceof</span> <span class="title class_">Parent6</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child6.<span class="property">__proto__</span> === <span class="title class_">Child6</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Child6</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Child6</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54b177fc76fc4b348572bfcc53e8514e~tplv-k3u1fbpfcp-watermark.image" alt="寄生组合式继承"></p><p><a href="https://github.com/Luoyuda/js-demo/tree/master/js/inherit">源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h1&gt;&lt;h2 id=&quot;原型链&quot;&gt;&lt;a href=&quot;#原型链&quot; class=&quot;headerlink&quot; title=&quot;原型链&quot;&gt;&lt;/a&gt;原型链&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="技术" scheme="https://luoyuda.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="原型链" scheme="https://luoyuda.github.io/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
    <category term="继承" scheme="https://luoyuda.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 笔记 - 创造型设计模式 （JavaScript实现）</title>
    <link href="https://luoyuda.github.io/2022/04/02/designPattern/1/"/>
    <id>https://luoyuda.github.io/2022/04/02/designPattern/1/</id>
    <published>2022-04-02T05:00:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创造型设计模式"><a href="#创造型设计模式" class="headerlink" title="创造型设计模式"></a>创造型设计模式</h1><p>关注怎样创建对象？降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成，关注于将对象的创建与使用分离</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>由一个工厂对象决定创建某一种产品对象类的实例。主要是用来创建同一类对象。通过创建一个新对象包装增强属性后返回对象，主要用来创建同一类对象</p><ul><li>优点<ul><li>类包含了所有实现细节</li><li>只需要关心参数</li></ul></li><li>缺点<ul><li>种类单一</li><li>增加类个数，会增加复杂度和理解难度</li><li>扩展困难</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">PopFactory</span> = <span class="keyword">function</span>(<span class="params">type, content</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  <span class="comment">// 共用部分</span></span><br><span class="line">  o.<span class="property">content</span> = content</span><br><span class="line">  o.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`content: <span class="subst">$&#123;<span class="variable language_">this</span>.content&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 差异部分</span></span><br><span class="line">  <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;alert&#x27;</span>:</span><br><span class="line">    o.<span class="property">hide</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;alert-hide&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;prompt&#x27;</span>:</span><br><span class="line">    o.<span class="property">hide</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;prompt-hide&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;confirm&#x27;</span>:</span><br><span class="line">    o.<span class="property">hide</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;confirm-hide&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回工厂对象</span></span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> alert = <span class="title class_">PopFactory</span>(<span class="string">&#x27;alert&#x27;</span>, <span class="string">&#x27;alert-content&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> prompt = <span class="title class_">PopFactory</span>(<span class="string">&#x27;prompt&#x27;</span>, <span class="string">&#x27;prompt-content&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> confirm = <span class="title class_">PopFactory</span>(<span class="string">&#x27;confirm&#x27;</span>, <span class="string">&#x27;confirm-content&#x27;</span>)</span><br><span class="line"></span><br><span class="line">alert.<span class="title function_">show</span>()</span><br><span class="line">prompt.<span class="title function_">show</span>()</span><br><span class="line">confirm.<span class="title function_">show</span>()</span><br><span class="line">alert.<span class="title function_">hide</span>()</span><br><span class="line">prompt.<span class="title function_">hide</span>()</span><br><span class="line">confirm.<span class="title function_">hide</span>()</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>通过对产品类的抽象，使其可以创建多类产品的实例,创建属于同一类，但是又有些许差异性的情况</p><ul><li>优点<ul><li>只需要知道具体工厂的名称就可得到所要的产品</li><li>无须知道产品的具体创建过程</li><li>灵活性增强</li><li>典型的解耦框架。高层模块只需要知道产品的抽象类，无须关心其他实现类，满足迪米特法则、依赖倒置原则和里氏替换原则</li></ul></li><li>缺点<ul><li>个数过多，增加复杂度</li><li>增加抽象性和理解难度</li><li>抽象产品只能生产一种产品</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Factory</span> = <span class="keyword">function</span> (<span class="params">type, content</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Factory</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable language_">this</span>[type](content)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Factory</span>(type, content)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Factory</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">A</span> = <span class="keyword">function</span>(<span class="params">content</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">content</span> = content</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Factory</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">B</span> = <span class="keyword">function</span>(<span class="params">content</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">content</span> = content</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Factory</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">C</span> = <span class="keyword">function</span>(<span class="params">content</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">content</span> = content</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Factory</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> b = <span class="title class_">Factory</span>(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> c = <span class="title class_">Factory</span>(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>通过抽象，使其业务用于对产品类簇的创建，而不负责创建某一类产品，显性的去定义一些功能，而不做具体实现，子类继承后子类负责实现，用于制定类的结构</p><ul><li>优点<ul><li>可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理</li><li>当需要产品族时，抽象工厂可以保证客户端始终只使用同一个产品的产品组</li><li>抽象工厂增强了程序的可扩展性，当增加一个新的产品族时，不需要修改原代码，满足开闭原则</li></ul></li><li>缺点<ul><li>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。增加了系统的抽象性和理解难度</li></ul></li></ul><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>将一个复杂对象的构建层与其表示层分离，同样的构建过程采取不一样的表示，关注实例的创造过程，一般用于创建符合对象</p><ul><li>优点<ul><li>封装性好，构建和表示分离</li><li>扩展性好，各个具体的建造者相互独立，有利于系统的解耦</li><li>客户端不必知道产品内部组成的细节，建造者可以对创建过程逐步细化，而不对其它模块产生任何影响，便于控制细节风险</li></ul></li><li>缺点<ul><li>产品的组成部分必须相同，这限制了其使用范围</li><li>如果产品的内部变化复杂，如果产品内部发生变化，则建造者也要同步修改，后期维护成本较大</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">VehicleFactory</span> = <span class="keyword">function</span>(<span class="params">subType, superType</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">VehicleFactory</span>[superType] === <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">// 继承父类 比如 BWM 继承 Car YUTONG 继承 Bus</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">VehicleFactory</span>[superType]()</span><br><span class="line">    subType.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">    subType.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = subType</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;未创建抽象类&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">VehicleFactory</span>.<span class="property">Car</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;Car&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">VehicleFactory</span>.<span class="property">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getPrice</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法不可调用&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">VehicleFactory</span>.<span class="property">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSpeed</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法不可调用&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">VehicleFactory</span>.<span class="property">Bus</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;Bus&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">VehicleFactory</span>.<span class="property">Bus</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getPrice</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法不可调用&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">VehicleFactory</span>.<span class="property">Bus</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSpeed</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法不可调用&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BMW</span> = <span class="keyword">function</span>(<span class="params">price, speed</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">speed</span> = speed</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">VehicleFactory</span>(<span class="variable constant_">BMW</span>, <span class="string">&#x27;Car&#x27;</span>)</span><br><span class="line">  <span class="variable constant_">BMW</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getPrice</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27; price &#x27;</span> + <span class="variable language_">this</span>.<span class="property">price</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable constant_">BMW</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSpeed</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27; speed &#x27;</span> + <span class="variable language_">this</span>.<span class="property">speed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Human</span> = <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">skill</span> = params.<span class="property">skill</span> || <span class="string">&#x27;无&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">hobby</span> = params.<span class="property">hobby</span> || <span class="string">&#x27;无&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSkill</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">skill</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getHobby</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">hobby</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Name</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">wholeName</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Work</span> = <span class="keyword">function</span>(<span class="params">work</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (work) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;code&#x27;</span>:</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">work</span> = <span class="string">&#x27;搬砖师&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">workDescription</span> = <span class="string">&#x27;996警告&#x27;</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ui&#x27;</span>:</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">work</span> = <span class="string">&#x27;P图师&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">workDescription</span> = <span class="string">&#x27;想要五彩斑斓的黑&#x27;</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">work</span> = <span class="string">&#x27;无业游民&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">workDescription</span> = <span class="string">&#x27;干一天玩三天&#x27;</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Work</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">changeWork</span> = <span class="keyword">function</span>(<span class="params">work</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">work</span> = work</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Work</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">changeWorkDescription</span> = <span class="keyword">function</span>(<span class="params">workDescription</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">workDescription</span> = workDescription</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params">name, work, skill, hobby</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> _person = <span class="keyword">new</span> <span class="title class_">Human</span>(skill, hobby)</span><br><span class="line">  _person.<span class="property">name</span> = <span class="keyword">new</span> <span class="title class_">Name</span>(name)</span><br><span class="line">  _person.<span class="property">work</span> = <span class="keyword">new</span> <span class="title class_">Work</span>(work)</span><br><span class="line">  <span class="keyword">return</span> _person</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>用原型实例指向创建对象的类，使用创建新对象的类共享对象的属性及方法，可以让多个对象分享同一个原型对象上的属性方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Woman</span> = <span class="keyword">function</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Woman</span></span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`女人的年龄是秘密`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Man</span> = <span class="keyword">function</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> woman = <span class="keyword">new</span> <span class="title class_">Woman</span>(<span class="string">&#x27;小红&#x27;</span>, <span class="number">24</span>)</span><br><span class="line"><span class="keyword">const</span> man = <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="string">&#x27;李白&#x27;</span>, <span class="number">24</span>)</span><br></pre></td></tr></table></figure><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>只允许实例化一个对象类，通过不同的命名空间来组织区分各个模块</p><ul><li>优点<ul><li>内存里只有一个实例，减少了内存的开销</li><li>可以避免对资源的多重占用</li><li>设置全局访问点，可以优化和共享资源的访问</li></ul></li><li>缺点<ul><li>单例模式一般没有接口，扩展困难。如果要扩展，则除了修改原来的代码，没有第二种途径，违背开闭原则</li><li>在并发测试中，单例模式不利于代码调试。在调试过程中，如果单例中的代码没有执行完，也不能模拟生成一个新的对象</li><li>单例模式的功能代码通常写在一个类中，如果功能设计不合理，则很容易违背单一职责原则</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">LazySingle</span> = (<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> _instance = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">_Single</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">STATIC_COUNT</span> = <span class="number">2</span></span><br><span class="line">    <span class="comment">// 单例对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">getStaticCount</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`静态变量 STATIC_COUNT = <span class="subst">$&#123;STATIC_COUNT&#125;</span>`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">publicCount</span>: <span class="number">3</span>, <span class="comment">// 公共变量</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 惰性返回</span></span><br><span class="line">    <span class="keyword">if</span>(!_instance)&#123;</span><br><span class="line">      _instance = <span class="title function_">_Single</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Luoyuda/js-demo/tree/master/js/designPattern/1">源码地址</a></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f08297cb98846e7862a921184079a0b~tplv-k3u1fbpfcp-watermark.image" alt="创造型设计模式.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创造型设计模式&quot;&gt;&lt;a href=&quot;#创造型设计模式&quot; class=&quot;headerlink&quot; title=&quot;创造型设计模式&quot;&gt;&lt;/a&gt;创造型设计模式&lt;/h1&gt;&lt;p&gt;关注怎样创建对象？降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成，关</summary>
      
    
    
    
    <category term="设计模式" scheme="https://luoyuda.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="创造型设计模式" scheme="https://luoyuda.github.io/tags/%E5%88%9B%E9%80%A0%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 笔记 - 结构型设计模式 （JavaScript实现）</title>
    <link href="https://luoyuda.github.io/2022/04/02/designPattern/2/"/>
    <id>https://luoyuda.github.io/2022/04/02/designPattern/2/</id>
    <published>2022-04-02T05:00:00.000Z</published>
    <updated>2022-04-15T06:06:33.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创造型设计模式"><a href="#创造型设计模式" class="headerlink" title="创造型设计模式"></a>创造型设计模式</h1><p>关注于代码结构的优化，以降低系统耦合</p><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口访问子接口，简化使用，通过对接口方法的封装，提供给上层代码使用</p><ul><li>优点<ul><li>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类</li><li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易</li><li>降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，编译一个子系统不会影响其他的子系统，也不会影响外观对象</li></ul></li><li>缺点<ul><li>不能很好地限制客户使用子系统类，很容易带来未知风险</li><li>增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Facade</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 模拟一个存在差异性的对象</span></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2</span> &gt; <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">otherValue</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2</span> &gt; <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">getValue</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> obj.<span class="property">value</span> || obj.<span class="property">otherValue</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getObj</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>将一个类的接口转换成另一个接口，以满足用户需求，使类中接口不兼容问题得到解决</p><ul><li>优点<ul><li>复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类</li><li>将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题</li></ul></li><li>缺点<ul><li>适配器编写过程需要结合业务场景全面考虑，可能会增加系统的复杂性</li><li>增加代码阅读难度，降低代码可读性，过多使用适配器会使系统代码变得凌乱</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> extend = <span class="keyword">function</span>(<span class="params">_default, options</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> _default) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_default.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">const</span> element = _default[key];</span><br><span class="line">      options[key] = options[key] || element</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> options</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据适配器</span></span><br><span class="line"><span class="keyword">const</span> adapter = <span class="keyword">function</span>(<span class="params">arr=[]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: arr[<span class="number">0</span>],</span><br><span class="line">    <span class="attr">age</span>: arr[<span class="number">1</span>],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>通过一个中介代理两个对象的传递</p><ul><li>优点<ul><li>客户端与目标间起到一个中介作用和保护目标对象的作用</li><li>代理对象可以扩展目标对象的功能</li><li>将客户端与目标对象分离，降低了系统的耦合度，增加可扩展性</li></ul></li><li>缺点<ul><li>会造成系统设计中类的数量增加</li><li>增加一个代理对象，会造成请求处理速度变慢</li><li>增加了系统的复杂度</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Girl</span> = <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Boy</span> = <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sendGift</span> = <span class="keyword">function</span>(<span class="params">gift, girl</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 送 <span class="subst">$&#123;gift&#125;</span> 给 <span class="subst">$&#123;girl.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ProxySend</span> = <span class="keyword">function</span>(<span class="params">boy, girl</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sendGift</span> = <span class="keyword">function</span>(<span class="params">gift</span>)&#123;</span><br><span class="line">    boy.<span class="title function_">sendGift</span>(gift, girl)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>在不改变对象的基础上，对其进行包装扩展，对原有对象进行一个扩展，是一种良性的扩展</p><ul><li>优点<ul><li>装饰器是继承的有力补充，比继承灵活，在不改变原有对象的情况下，动态的给一个对象扩展功能，即插即用</li><li>通过使用不用装饰类及这些装饰类的排列组合，可以实现不同效果</li><li>装饰器模式完全遵守开闭原则</li></ul></li><li>缺点<ul><li>饰器模式会增加许多子类，过度使用会增加程序得复杂性</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Person-getName&#x27;</span>,a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> log = <span class="keyword">function</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Decorator-&#x27;</span>,a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> decorator = <span class="keyword">function</span>(<span class="params">A, name, fn</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> f = A.<span class="property"><span class="keyword">prototype</span></span>[name]</span><br><span class="line">  <span class="keyword">var</span> bind = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> f.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  A.<span class="property"><span class="keyword">prototype</span></span>[name] = bind</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">decorator</span>(<span class="title class_">Person</span>, <span class="string">&#x27;getName&#x27;</span>, log)</span><br></pre></td></tr></table></figure><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>在系统沿着多个维度变化的同时，不增加其复杂度并达到解耦</p><ul><li>优点<ul><li>抽象与实现分离，扩展能力强</li><li>符合开闭原则</li><li>符合合成复用原则</li><li>实现细节对客户透明</li></ul></li><li>缺点<ul><li>聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，能正确地识别出系统中两个独立变化的维度，增加了系统的理解与设计难度</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Speed</span> = <span class="keyword">function</span>(<span class="params">x, y</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Speed</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">run</span> = <span class="keyword">function</span>(<span class="params">x, y</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`(<span class="subst">$&#123;<span class="variable language_">this</span>.x&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.y&#125;</span>) ==&gt; (<span class="subst">$&#123;x&#125;</span>, <span class="subst">$&#123;y&#125;</span>)`</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 颜色单元</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Color</span> = <span class="keyword">function</span>(<span class="params">color</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Color</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">draw</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`绘制<span class="subst">$&#123;<span class="variable language_">this</span>.color&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变形单元</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Shape</span> = <span class="keyword">function</span>(<span class="params">shape</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">shape</span> = shape</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Shape</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">change</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`变形 <span class="subst">$&#123;<span class="variable language_">this</span>.shape&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 说话单元</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Speak</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Speak</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params">word</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;word&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 球类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Ball</span> = <span class="keyword">function</span>(<span class="params">c, x=<span class="number">0</span>, y=<span class="number">0</span></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="keyword">new</span> <span class="title class_">Speed</span>(x, y)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = <span class="keyword">new</span> <span class="title class_">Color</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 精灵类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sprite</span> = <span class="keyword">function</span>(<span class="params">c, x, y, s</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">shape</span> = <span class="keyword">new</span> <span class="title class_">Shape</span>(s)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="keyword">new</span> <span class="title class_">Speed</span>(x, y)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = <span class="keyword">new</span> <span class="title class_">Color</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 人类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params">x, y</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="keyword">new</span> <span class="title class_">Speed</span>(x, y)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">speak</span> = <span class="keyword">new</span> <span class="title class_">Speak</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>部分-整体模式，将对象组合成树形结构以表示部分整体的层次结构</p><ul><li>优点<ul><li>组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码</li><li>更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，满足“开闭原则”</li></ul></li><li>缺点<ul><li>设计复杂，需要花更多时间理清类之间的层次关系</li><li>不容易限制容器中的构件</li><li>不容易用继承的方法来增加构件的新功能<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">El</span> = <span class="keyword">function</span>(<span class="params">type, content=<span class="string">&#x27;&#x27;</span>, children = []</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = type</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">content</span> = content</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">children</span> = children</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">El</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">render</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;<span class="subst">$&#123;<span class="variable language_">this</span>.type&#125;</span>&gt;</span></span><br><span class="line"><span class="string"><span class="subst">$&#123;<span class="variable language_">this</span>.content&#125;</span></span></span><br><span class="line"><span class="string"><span class="subst">$&#123;<span class="variable language_">this</span>.children.reduce((p, i) =&gt; p + i.render(), <span class="string">&#x27;&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">&lt;/<span class="subst">$&#123;<span class="variable language_">this</span>.type&#125;</span>&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">News</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">children</span> = []</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span> = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">News</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">News</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">News</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getElement</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抽象方法&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inherit = <span class="keyword">function</span>(<span class="params">child, parent</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">parent</span>()</span><br><span class="line">  child.<span class="property">constructor</span> = child</span><br><span class="line">  child.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Container</span> = <span class="keyword">function</span>(<span class="params">id, parent</span>)&#123;</span><br><span class="line">  <span class="title class_">News</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">id</span> = id</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">parent</span> = parent</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inherit</span>(<span class="title class_">Container</span>, <span class="title class_">News</span>)</span><br><span class="line"><span class="title class_">Container</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span> = <span class="keyword">new</span> <span class="title class_">El</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">id</span> = <span class="variable language_">this</span>.<span class="property">id</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Container</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">child</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">children</span>.<span class="title function_">push</span>(child)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Container</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getElement</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">render</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Item</span> = <span class="keyword">function</span>(<span class="params">id, parent</span>)&#123;</span><br><span class="line">  <span class="title class_">News</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">id</span> = id</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">parent</span> = parent</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inherit</span>(<span class="title class_">Item</span>, <span class="title class_">News</span>)</span><br><span class="line"><span class="title class_">Item</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span> = <span class="keyword">new</span> <span class="title class_">El</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">id</span> = <span class="variable language_">this</span>.<span class="property">id</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Item</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">child</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">children</span>.<span class="title function_">push</span>(child)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Item</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getElement</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">render</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Group</span> = <span class="keyword">function</span>(<span class="params">id, parent</span>)&#123;</span><br><span class="line">  <span class="title class_">News</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">id</span> = id</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">parent</span> = parent</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inherit</span>(<span class="title class_">Group</span>, <span class="title class_">News</span>)</span><br><span class="line"><span class="title class_">Group</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span> = <span class="keyword">new</span> <span class="title class_">El</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">id</span> = <span class="variable language_">this</span>.<span class="property">id</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Group</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">child</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">children</span>.<span class="title function_">push</span>(child)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Group</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getElement</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">render</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ImageNews</span> = <span class="keyword">function</span>(<span class="params">url, href</span>)&#123;</span><br><span class="line">  <span class="title class_">News</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">url</span> = url</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">href</span> = href</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inherit</span>(<span class="title class_">ImageNews</span>, <span class="title class_">News</span>)</span><br><span class="line"><span class="title class_">ImageNews</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span> = <span class="keyword">new</span> <span class="title class_">El</span>(<span class="string">&#x27;a&#x27;</span>, <span class="variable language_">this</span>.<span class="property">href</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">children</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">El</span>(<span class="string">&#x27;img&#x27;</span>, <span class="variable language_">this</span>.<span class="property">url</span>))</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ImageNews</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">child</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">children</span>.<span class="title function_">push</span>(child)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ImageNews</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getElement</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">render</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TextNews</span> = <span class="keyword">function</span>(<span class="params">content, href</span>)&#123;</span><br><span class="line">  <span class="title class_">News</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">content</span> = content</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">href</span> = href</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inherit</span>(<span class="title class_">TextNews</span>, <span class="title class_">News</span>)</span><br><span class="line"><span class="title class_">TextNews</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span> = <span class="keyword">new</span> <span class="title class_">El</span>(<span class="string">&#x27;a&#x27;</span>, <span class="variable language_">this</span>.<span class="property">href</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">children</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">El</span>(<span class="string">&#x27;span&#x27;</span>, <span class="variable language_">this</span>.<span class="property">content</span>))</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">TextNews</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">child</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">children</span>.<span class="title function_">push</span>(child)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">TextNews</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getElement</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">render</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2></li></ul></li></ul><p>运用共享技术有效支持大量的细粒度的对象，避免对象间拥有相同内容造成多余开销</p><ul><li>优点<ul><li>相同对象只要保存一份，这降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力</li></ul></li><li>缺点<ul><li>为了使对象可以共享，需要将一些不能共享的状态外部化，这将增加程序的复杂性</li><li>读取享元模式的外部状态会使得运行时间稍微变长</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 运动单元</span></span><br><span class="line"><span class="keyword">const</span> speed = &#123;</span><br><span class="line">  <span class="attr">run</span>: <span class="keyword">function</span>(<span class="params">x, y</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`(<span class="subst">$&#123;<span class="variable language_">this</span>.x&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.y&#125;</span>) ==&gt; (<span class="subst">$&#123;x&#125;</span>, <span class="subst">$&#123;y&#125;</span>)`</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 颜色单元</span></span><br><span class="line"><span class="keyword">const</span> color = &#123;</span><br><span class="line">  <span class="attr">draw</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`绘制<span class="subst">$&#123;<span class="variable language_">this</span>.color&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变形单元</span></span><br><span class="line"><span class="keyword">const</span> shape = &#123;</span><br><span class="line">  <span class="attr">change</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`变形 <span class="subst">$&#123;<span class="variable language_">this</span>.shape&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 说话单元</span></span><br><span class="line"><span class="keyword">const</span> speak = &#123;</span><br><span class="line">  <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params">word</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;word&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 球类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Ball</span> = <span class="keyword">function</span>(<span class="params">c, x=<span class="number">0</span>, y=<span class="number">0</span></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = c</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Ball</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  ...color,</span><br><span class="line">  ...speed,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精灵类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sprite</span> = <span class="keyword">function</span>(<span class="params">c, x, y, s</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = c</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">shape</span> = s</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Sprite</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  ...color,</span><br><span class="line">  ...speed,</span><br><span class="line">  ...shape</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params">x, y</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  ...speak,</span><br><span class="line">  ...speed,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Luoyuda/js-demo/tree/master/js/designPattern/2">源码地址</a></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f37e8bf3e30347ce937df3fba121507a~tplv-k3u1fbpfcp-watermark.image" alt="结构型设计模式.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创造型设计模式&quot;&gt;&lt;a href=&quot;#创造型设计模式&quot; class=&quot;headerlink&quot; title=&quot;创造型设计模式&quot;&gt;&lt;/a&gt;创造型设计模式&lt;/h1&gt;&lt;p&gt;关注于代码结构的优化，以降低系统耦合&lt;/p&gt;
&lt;h2 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模</summary>
      
    
    
    
    <category term="设计模式" scheme="https://luoyuda.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="JavaScript" scheme="https://luoyuda.github.io/tags/JavaScript/"/>
    
    <category term="结构型设计模式" scheme="https://luoyuda.github.io/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
